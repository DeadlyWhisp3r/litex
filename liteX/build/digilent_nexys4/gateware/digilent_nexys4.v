// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : digilent_nexys4.v
// Device     : xc7a100tcsg324-1
// LiteX sha1 : --------
// Date       : 2024-03-12 14:21:26
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module digilent_nexys4 (
    output reg    [22:0] cellularram_addr,
    output reg           cellularram_adv,
    output reg           cellularram_cen,
    output reg           cellularram_clk,
    output reg           cellularram_cre,
    inout  wire   [15:0] cellularram_data,
    output reg           cellularram_lb,
    output reg           cellularram_oen,
    output reg           cellularram_ub,
    input  wire          cellularram_wait,
    output reg           cellularram_wen,
    (* dont_touch = "true" *)
    input  wire          clk100,
    input  wire          cpu_reset,
    input  wire          my_uart_pads_rx,
    output reg           my_uart_pads_tx,
    output wire          segled_0,
    output wire          segled_1,
    output wire          segled_2,
    output wire          segled_3,
    output wire          segled_4,
    output wire          segled_5,
    output wire          segled_6,
    output wire          segled_7,
    output wire          segled_an0,
    output wire          segled_an1,
    output wire          segled_an2,
    output wire          segled_an3,
    output wire          segled_an4,
    output wire          segled_an5,
    output wire          segled_an6,
    output wire          segled_an7,
    input  wire          serial_rx,
    output reg           serial_tx,
    input  wire          user_btn4,
    output wire          user_led0,
    output wire          user_led1,
    output wire          user_led10,
    output wire          user_led11,
    output wire          user_led12,
    output wire          user_led13,
    output wire          user_led14,
    output wire          user_led15,
    output wire          user_led2,
    output wire          user_led3,
    output wire          user_led4,
    output wire          user_led5,
    output wire          user_led6,
    output wire          user_led7,
    output wire          user_led8,
    output wire          user_led9,
    input  wire          user_sw0,
    input  wire          user_sw1,
    input  wire          user_sw10,
    input  wire          user_sw11,
    input  wire          user_sw12,
    input  wire          user_sw13,
    input  wire          user_sw14,
    input  wire          user_sw15,
    input  wire          user_sw2,
    input  wire          user_sw3,
    input  wire          user_sw4,
    input  wire          user_sw5,
    input  wire          user_sw6,
    input  wire          user_sw7,
    input  wire          user_sw8,
    input  wire          user_sw9
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (S7MMCM)
│    │    └─── [BUFG]
│    │    └─── [BUFG]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [BUFG]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [BUFG]
│    │    └─── [FDCE]
│    │    └─── [FDCE]
│    │    └─── [BUFG]
│    │    └─── [FDCE]
│    │    └─── [BUFG]
│    │    └─── [FDCE]
│    │    └─── [MMCME2_ADV]
│    └─── idelayctrl (S7IDELAYCTRL)
│    │    └─── [IDELAYCTRL]
└─── bus (SoCBusHandler)
│    └─── converter_0* (Converter)
│    │    └─── downconverter_0* (DownConverter)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uartbone_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uartbone (UARTBone)
│    └─── phy (RS232PHY)
│    │    └─── tx (RS232PHYTX)
│    │    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    │    └─── fsm (FSM)
│    │    └─── rx (RS232PHYRX)
│    │    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    │    └─── fsm (FSM)
│    └─── fsm (FSM)
│    └─── timer (WaitTimer)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── main_ram (CellularRAM)
│    └─── fsm (FSM)
└─── adder (Adder)
│    └─── [adder]
└─── my_uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── my_uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── seg (SevenSegmentDisplay)
│    └─── sevensegment_0* (SevenSegment)
│    └─── tick (Tick)
└─── switches (Switches)
└─── button (Button)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_2* (CSRStorage)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstorage_6* (CSRStorage)
│    │    └─── csrstorage_7* (CSRStorage)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    └─── csrbank_6* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
└─── csr_interconnect (InterconnectShared)
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
└─── [FDPE]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          addAdder_bus_ack;
wire    [2:0] addAdder_bus_adr;
wire    [1:0] addAdder_bus_bte;
wire    [2:0] addAdder_bus_cti;
wire          addAdder_bus_cyc;
wire   [31:0] addAdder_bus_dat_r;
wire   [31:0] addAdder_bus_dat_w;
wire          addAdder_bus_err;
wire    [3:0] addAdder_bus_sel;
wire          addAdder_bus_stb;
wire          addAdder_bus_we;
reg           addCellularRAM_bus_ack = 1'd0;
reg           addCellularRAM_bus_ack_cellularram_next_value1 = 1'd0;
reg           addCellularRAM_bus_ack_cellularram_next_value_ce1 = 1'd0;
wire   [22:0] addCellularRAM_bus_adr;
reg     [2:0] addCellularRAM_bus_cti = 3'd0;
reg           addCellularRAM_bus_cyc = 1'd0;
reg    [15:0] addCellularRAM_bus_dat_r = 16'd0;
reg    [15:0] addCellularRAM_bus_dat_r_cellularram_next_value13 = 16'd0;
reg           addCellularRAM_bus_dat_r_cellularram_next_value_ce13 = 1'd0;
reg    [15:0] addCellularRAM_bus_dat_w = 16'd0;
reg     [1:0] addCellularRAM_bus_sel = 2'd0;
reg           addCellularRAM_bus_stb = 1'd0;
reg           addCellularRAM_bus_we = 1'd0;
reg    [22:0] addCellularRAM_cellularram_addr_cellularram_next_value9 = 23'd0;
reg           addCellularRAM_cellularram_addr_cellularram_next_value_ce9 = 1'd0;
reg           addCellularRAM_cellularram_adv_cellularram_next_value3 = 1'd0;
reg           addCellularRAM_cellularram_adv_cellularram_next_value_ce3 = 1'd0;
reg           addCellularRAM_cellularram_cen_cellularram_next_value2 = 1'd0;
reg           addCellularRAM_cellularram_cen_cellularram_next_value_ce2 = 1'd0;
reg           addCellularRAM_cellularram_clk_cellularram_next_value6 = 1'd0;
reg           addCellularRAM_cellularram_clk_cellularram_next_value_ce6 = 1'd0;
reg           addCellularRAM_cellularram_cre_cellularram_next_value7 = 1'd0;
reg           addCellularRAM_cellularram_cre_cellularram_next_value_ce7 = 1'd0;
reg           addCellularRAM_cellularram_lb_cellularram_next_value4 = 1'd0;
reg           addCellularRAM_cellularram_lb_cellularram_next_value_ce4 = 1'd0;
reg           addCellularRAM_cellularram_oen_cellularram_next_value11 = 1'd0;
reg           addCellularRAM_cellularram_oen_cellularram_next_value_ce11 = 1'd0;
reg           addCellularRAM_cellularram_ub_cellularram_next_value5 = 1'd0;
reg           addCellularRAM_cellularram_ub_cellularram_next_value_ce5 = 1'd0;
reg           addCellularRAM_cellularram_wen_cellularram_next_value10 = 1'd0;
reg           addCellularRAM_cellularram_wen_cellularram_next_value_ce10 = 1'd0;
reg     [4:0] addCellularRAM_delaycounter = 5'd0;
reg     [4:0] addCellularRAM_delaycounter_cellularram_next_value0 = 5'd0;
reg           addCellularRAM_delaycounter_cellularram_next_value_ce0 = 1'd0;
wire   [15:0] addCellularRAM_i;
reg    [15:0] addCellularRAM_o = 16'd0;
reg    [15:0] addCellularRAM_o_cellularram_next_value12 = 16'd0;
reg           addCellularRAM_o_cellularram_next_value_ce12 = 1'd0;
reg           addCellularRAM_oe = 1'd0;
reg           addCellularRAM_oe_cellularram_next_value8 = 1'd0;
reg           addCellularRAM_oe_cellularram_next_value_ce8 = 1'd0;
reg           addCellularRAM_reset = 1'd0;
reg    [29:0] array_muxed0 = 30'd0;
reg    [31:0] array_muxed1 = 32'd0;
reg     [3:0] array_muxed2 = 4'd0;
reg           array_muxed3 = 1'd0;
reg           array_muxed4 = 1'd0;
reg           array_muxed5 = 1'd0;
reg     [2:0] array_muxed6 = 3'd0;
reg     [1:0] array_muxed7 = 2'd0;
reg     [1:0] basesoc_basesoc_addr_bytes_count = 2'd0;
reg     [1:0] basesoc_basesoc_addr_bytes_count_uartbone_next_value1 = 2'd0;
reg           basesoc_basesoc_addr_bytes_count_uartbone_next_value_ce1 = 1'd0;
reg    [31:0] basesoc_basesoc_address = 32'd0;
reg    [31:0] basesoc_basesoc_address_uartbone_next_value5 = 32'd0;
reg           basesoc_basesoc_address_uartbone_next_value_ce5 = 1'd0;
wire   [14:0] basesoc_basesoc_adr;
reg           basesoc_basesoc_adr_burst = 1'd0;
reg     [7:0] basesoc_basesoc_cmd = 8'd0;
reg     [7:0] basesoc_basesoc_cmd_uartbone_next_value3 = 8'd0;
reg           basesoc_basesoc_cmd_uartbone_next_value_ce3 = 1'd0;
reg    [22:0] basesoc_basesoc_count = 23'd7500000;
wire   [31:0] basesoc_basesoc_dat_r;
reg    [31:0] basesoc_basesoc_data = 32'd0;
reg     [1:0] basesoc_basesoc_data_bytes_count = 2'd0;
reg     [1:0] basesoc_basesoc_data_bytes_count_uartbone_next_value0 = 2'd0;
reg           basesoc_basesoc_data_bytes_count_uartbone_next_value_ce0 = 1'd0;
reg    [31:0] basesoc_basesoc_data_uartbone_next_value7 = 32'd0;
reg           basesoc_basesoc_data_uartbone_next_value_ce7 = 1'd0;
wire          basesoc_basesoc_done;
reg           basesoc_basesoc_incr = 1'd0;
reg           basesoc_basesoc_incr_uartbone_next_value6 = 1'd0;
reg           basesoc_basesoc_incr_uartbone_next_value_ce6 = 1'd0;
reg           basesoc_basesoc_is_ongoing = 1'd0;
reg     [7:0] basesoc_basesoc_length = 8'd0;
reg     [7:0] basesoc_basesoc_length_uartbone_next_value4 = 8'd0;
reg           basesoc_basesoc_length_uartbone_next_value_ce4 = 1'd0;
reg           basesoc_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] basesoc_basesoc_ram_bus_adr;
wire    [1:0] basesoc_basesoc_ram_bus_bte;
wire    [2:0] basesoc_basesoc_ram_bus_cti;
wire          basesoc_basesoc_ram_bus_cyc;
wire   [31:0] basesoc_basesoc_ram_bus_dat_r;
wire   [31:0] basesoc_basesoc_ram_bus_dat_w;
reg           basesoc_basesoc_ram_bus_err = 1'd0;
wire    [3:0] basesoc_basesoc_ram_bus_sel;
wire          basesoc_basesoc_ram_bus_stb;
wire          basesoc_basesoc_ram_bus_we;
wire          basesoc_basesoc_reset;
reg     [3:0] basesoc_basesoc_rx_count = 4'd0;
reg     [3:0] basesoc_basesoc_rx_count_rs232phyrx0_next_value0 = 4'd0;
reg           basesoc_basesoc_rx_count_rs232phyrx0_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_basesoc_rx_data = 8'd0;
reg     [7:0] basesoc_basesoc_rx_data_rs232phyrx0_next_value1 = 8'd0;
reg           basesoc_basesoc_rx_data_rs232phyrx0_next_value_ce1 = 1'd0;
reg           basesoc_basesoc_rx_enable = 1'd0;
reg    [31:0] basesoc_basesoc_rx_phase = 32'd0;
wire          basesoc_basesoc_rx_rx;
reg           basesoc_basesoc_rx_rx_d = 1'd0;
reg     [7:0] basesoc_basesoc_rx_source_payload_data = 8'd0;
reg           basesoc_basesoc_rx_source_ready = 1'd0;
reg           basesoc_basesoc_rx_source_valid = 1'd0;
reg           basesoc_basesoc_rx_tick = 1'd0;
reg           basesoc_basesoc_serial_tx_rs232phytx0_next_value1 = 1'd0;
reg           basesoc_basesoc_serial_tx_rs232phytx0_next_value_ce1 = 1'd0;
reg     [3:0] basesoc_basesoc_tx_count = 4'd0;
reg     [3:0] basesoc_basesoc_tx_count_rs232phytx0_next_value0 = 4'd0;
reg           basesoc_basesoc_tx_count_rs232phytx0_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_basesoc_tx_data = 8'd0;
reg     [7:0] basesoc_basesoc_tx_data_rs232phytx0_next_value2 = 8'd0;
reg           basesoc_basesoc_tx_data_rs232phytx0_next_value_ce2 = 1'd0;
reg           basesoc_basesoc_tx_enable = 1'd0;
reg    [31:0] basesoc_basesoc_tx_phase = 32'd0;
wire          basesoc_basesoc_tx_sink_last;
reg     [7:0] basesoc_basesoc_tx_sink_payload_data = 8'd0;
reg           basesoc_basesoc_tx_sink_ready = 1'd0;
reg           basesoc_basesoc_tx_sink_valid = 1'd0;
reg           basesoc_basesoc_tx_tick = 1'd0;
wire          basesoc_basesoc_wait;
wire          basesoc_basesoc_wishbone_ack;
wire   [29:0] basesoc_basesoc_wishbone_adr;
reg     [1:0] basesoc_basesoc_wishbone_bte = 2'd0;
reg     [2:0] basesoc_basesoc_wishbone_cti = 3'd0;
reg           basesoc_basesoc_wishbone_cyc = 1'd0;
wire   [31:0] basesoc_basesoc_wishbone_dat_r;
wire   [31:0] basesoc_basesoc_wishbone_dat_w;
wire          basesoc_basesoc_wishbone_err;
wire    [3:0] basesoc_basesoc_wishbone_sel;
reg           basesoc_basesoc_wishbone_stb = 1'd0;
reg           basesoc_basesoc_wishbone_we = 1'd0;
reg     [7:0] basesoc_basesoc_words_count = 8'd0;
reg     [7:0] basesoc_basesoc_words_count_uartbone_next_value2 = 8'd0;
reg           basesoc_basesoc_words_count_uartbone_next_value_ce2 = 1'd0;
wire          basesoc_bus_error;
reg    [31:0] basesoc_bus_errors = 32'd0;
reg           basesoc_bus_errors_re = 1'd0;
wire   [31:0] basesoc_bus_errors_status;
wire          basesoc_bus_errors_we;
wire          basesoc_cpu_dbus_dbus_ack;
wire   [29:0] basesoc_cpu_dbus_dbus_adr;
wire    [1:0] basesoc_cpu_dbus_dbus_bte;
wire    [2:0] basesoc_cpu_dbus_dbus_cti;
wire          basesoc_cpu_dbus_dbus_cyc;
wire   [31:0] basesoc_cpu_dbus_dbus_dat_r;
wire   [31:0] basesoc_cpu_dbus_dbus_dat_w;
wire          basesoc_cpu_dbus_dbus_err;
wire    [3:0] basesoc_cpu_dbus_dbus_sel;
wire          basesoc_cpu_dbus_dbus_stb;
wire          basesoc_cpu_dbus_dbus_we;
wire          basesoc_cpu_ibus_ibus_ack;
wire   [29:0] basesoc_cpu_ibus_ibus_adr;
wire    [1:0] basesoc_cpu_ibus_ibus_bte;
wire    [2:0] basesoc_cpu_ibus_ibus_cti;
wire          basesoc_cpu_ibus_ibus_cyc;
wire   [31:0] basesoc_cpu_ibus_ibus_dat_r;
wire   [31:0] basesoc_cpu_ibus_ibus_dat_w;
wire          basesoc_cpu_ibus_ibus_err;
wire    [3:0] basesoc_cpu_ibus_ibus_sel;
wire          basesoc_cpu_ibus_ibus_stb;
wire          basesoc_cpu_ibus_ibus_we;
reg    [31:0] basesoc_cpu_interrupt = 32'd0;
wire          basesoc_cpu_reset;
wire          basesoc_cpu_rst;
reg           basesoc_cpu_vexriscv_dbus_err = 1'd0;
reg           basesoc_cpu_vexriscv_debug_bus_ack = 1'd0;
wire   [29:0] basesoc_cpu_vexriscv_debug_bus_adr;
wire    [1:0] basesoc_cpu_vexriscv_debug_bus_bte;
wire    [2:0] basesoc_cpu_vexriscv_debug_bus_cti;
wire          basesoc_cpu_vexriscv_debug_bus_cyc;
reg    [31:0] basesoc_cpu_vexriscv_debug_bus_dat_r = 32'd0;
wire   [31:0] basesoc_cpu_vexriscv_debug_bus_dat_w;
reg           basesoc_cpu_vexriscv_debug_bus_err = 1'd0;
wire    [3:0] basesoc_cpu_vexriscv_debug_bus_sel;
wire          basesoc_cpu_vexriscv_debug_bus_stb;
wire          basesoc_cpu_vexriscv_debug_bus_we;
reg           basesoc_cpu_vexriscv_debug_reset = 1'd0;
reg     [7:0] basesoc_cpu_vexriscv_i_cmd_payload_address = 8'd0;
reg    [31:0] basesoc_cpu_vexriscv_i_cmd_payload_data = 32'd0;
reg           basesoc_cpu_vexriscv_i_cmd_payload_wr = 1'd0;
reg           basesoc_cpu_vexriscv_i_cmd_valid = 1'd0;
reg           basesoc_cpu_vexriscv_ibus_err = 1'd0;
wire          basesoc_cpu_vexriscv_o_cmd_ready;
wire          basesoc_cpu_vexriscv_o_resetOut;
wire   [31:0] basesoc_cpu_vexriscv_o_rsp_data;
reg           basesoc_cpu_vexriscv_reset_debug_logic = 1'd0;
reg           basesoc_cpu_vexriscv_transfer_complete = 1'd0;
reg           basesoc_cpu_vexriscv_transfer_in_progress = 1'd0;
reg           basesoc_cpu_vexriscv_transfer_wait_for_ack = 1'd0;
reg           basesoc_en_re = 1'd0;
reg           basesoc_en_storage = 1'd0;
reg           basesoc_enable_re = 1'd0;
reg           basesoc_enable_storage = 1'd0;
wire          basesoc_irq;
reg           basesoc_load_re = 1'd0;
reg    [31:0] basesoc_load_storage = 32'd0;
reg           basesoc_pending_r = 1'd0;
reg           basesoc_pending_re = 1'd0;
reg           basesoc_pending_status = 1'd0;
wire          basesoc_pending_we;
wire   [10:0] basesoc_ram_adr;
reg           basesoc_ram_adr_burst = 1'd0;
reg           basesoc_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] basesoc_ram_bus_ram_bus_adr;
wire    [1:0] basesoc_ram_bus_ram_bus_bte;
wire    [2:0] basesoc_ram_bus_ram_bus_cti;
wire          basesoc_ram_bus_ram_bus_cyc;
wire   [31:0] basesoc_ram_bus_ram_bus_dat_r;
wire   [31:0] basesoc_ram_bus_ram_bus_dat_w;
reg           basesoc_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] basesoc_ram_bus_ram_bus_sel;
wire          basesoc_ram_bus_ram_bus_stb;
wire          basesoc_ram_bus_ram_bus_we;
wire   [31:0] basesoc_ram_dat_r;
wire   [31:0] basesoc_ram_dat_w;
reg     [3:0] basesoc_ram_we = 4'd0;
reg           basesoc_reload_re = 1'd0;
reg    [31:0] basesoc_reload_storage = 32'd0;
reg           basesoc_reset_re = 1'd0;
reg     [1:0] basesoc_reset_storage = 2'd0;
reg           basesoc_scratch_re = 1'd0;
reg    [31:0] basesoc_scratch_storage = 32'd305419896;
reg           basesoc_soc_rst = 1'd0;
reg           basesoc_status_re = 1'd0;
reg           basesoc_status_status = 1'd0;
wire          basesoc_status_we;
reg           basesoc_update_value_re = 1'd0;
reg           basesoc_update_value_storage = 1'd0;
reg    [31:0] basesoc_value = 32'd0;
reg           basesoc_value_re = 1'd0;
reg    [31:0] basesoc_value_status = 32'd0;
wire          basesoc_value_we;
reg    [31:0] basesoc_vexriscv = 32'd0;
wire          basesoc_zero0;
wire          basesoc_zero1;
wire          basesoc_zero2;
reg           basesoc_zero_clear = 1'd0;
reg           basesoc_zero_pending = 1'd0;
wire          basesoc_zero_status;
wire          basesoc_zero_trigger;
reg           basesoc_zero_trigger_d = 1'd0;
reg           button_clear = 1'd0;
reg           button_edge_re = 1'd0;
reg           button_edge_storage = 1'd0;
reg           button_enable_re = 1'd0;
reg           button_enable_storage = 1'd0;
wire          button_i00;
wire          button_i01;
wire          button_i02;
reg           button_in_pads_n_d = 1'd0;
wire          button_irq;
reg           button_mode_re = 1'd0;
reg           button_mode_storage = 1'd0;
reg           button_pending = 1'd0;
reg           button_pending_r = 1'd0;
reg           button_pending_re = 1'd0;
reg           button_pending_status = 1'd0;
wire          button_pending_we;
wire          button_status;
reg           button_status_re = 1'd0;
reg           button_status_status = 1'd0;
wire          button_status_we;
reg           button_trigger = 1'd0;
reg           button_trigger_d = 1'd0;
reg     [2:0] cellularram_next_state = 3'd0;
reg     [2:0] cellularram_state = 3'd0;
reg    [19:0] count = 20'd1000000;
(* dont_touch = "true" *)
wire          crg_clkin;
wire          crg_clkout0;
wire          crg_clkout1;
wire          crg_clkout2;
wire          crg_clkout3;
wire          crg_clkout4;
wire          crg_clkout5;
wire          crg_clkout_buf0;
wire          crg_clkout_buf1;
wire          crg_clkout_buf2;
wire          crg_clkout_buf3;
wire          crg_clkout_buf4;
wire          crg_clkout_buf5;
reg           crg_ic_reset = 1'd1;
wire          crg_locked;
reg           crg_power_down = 1'd0;
wire          crg_reset;
reg     [3:0] crg_reset_counter = 4'd15;
reg           crg_rst = 1'd0;
wire    [5:0] csr_bankarray_adr;
wire          csr_bankarray_csrbank0_edge0_r;
reg           csr_bankarray_csrbank0_edge0_re = 1'd0;
wire          csr_bankarray_csrbank0_edge0_w;
reg           csr_bankarray_csrbank0_edge0_we = 1'd0;
wire          csr_bankarray_csrbank0_ev_enable0_r;
reg           csr_bankarray_csrbank0_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank0_ev_enable0_w;
reg           csr_bankarray_csrbank0_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank0_ev_pending_r;
reg           csr_bankarray_csrbank0_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank0_ev_pending_w;
reg           csr_bankarray_csrbank0_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank0_ev_status_r;
reg           csr_bankarray_csrbank0_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank0_ev_status_w;
reg           csr_bankarray_csrbank0_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank0_in_r;
reg           csr_bankarray_csrbank0_in_re = 1'd0;
wire          csr_bankarray_csrbank0_in_w;
reg           csr_bankarray_csrbank0_in_we = 1'd0;
wire          csr_bankarray_csrbank0_mode0_r;
reg           csr_bankarray_csrbank0_mode0_re = 1'd0;
wire          csr_bankarray_csrbank0_mode0_w;
reg           csr_bankarray_csrbank0_mode0_we = 1'd0;
wire          csr_bankarray_csrbank0_sel;
wire   [31:0] csr_bankarray_csrbank1_bus_errors_r;
reg           csr_bankarray_csrbank1_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_bus_errors_w;
reg           csr_bankarray_csrbank1_bus_errors_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank1_reset0_r;
reg           csr_bankarray_csrbank1_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank1_reset0_w;
reg           csr_bankarray_csrbank1_reset0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_scratch0_r;
reg           csr_bankarray_csrbank1_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_scratch0_w;
reg           csr_bankarray_csrbank1_scratch0_we = 1'd0;
wire          csr_bankarray_csrbank1_sel;
wire   [15:0] csr_bankarray_csrbank2_out0_r;
reg           csr_bankarray_csrbank2_out0_re = 1'd0;
wire   [15:0] csr_bankarray_csrbank2_out0_w;
reg           csr_bankarray_csrbank2_out0_we = 1'd0;
wire          csr_bankarray_csrbank2_sel;
wire    [1:0] csr_bankarray_csrbank3_ev_enable0_r;
reg           csr_bankarray_csrbank3_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_enable0_w;
reg           csr_bankarray_csrbank3_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_pending_r;
reg           csr_bankarray_csrbank3_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_pending_w;
reg           csr_bankarray_csrbank3_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_status_r;
reg           csr_bankarray_csrbank3_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_ev_status_w;
reg           csr_bankarray_csrbank3_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank3_rxempty_r;
reg           csr_bankarray_csrbank3_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank3_rxempty_w;
reg           csr_bankarray_csrbank3_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank3_rxfull_r;
reg           csr_bankarray_csrbank3_rxfull_re = 1'd0;
wire          csr_bankarray_csrbank3_rxfull_w;
reg           csr_bankarray_csrbank3_rxfull_we = 1'd0;
wire          csr_bankarray_csrbank3_sel;
wire          csr_bankarray_csrbank3_txempty_r;
reg           csr_bankarray_csrbank3_txempty_re = 1'd0;
wire          csr_bankarray_csrbank3_txempty_w;
reg           csr_bankarray_csrbank3_txempty_we = 1'd0;
wire          csr_bankarray_csrbank3_txfull_r;
reg           csr_bankarray_csrbank3_txfull_re = 1'd0;
wire          csr_bankarray_csrbank3_txfull_w;
reg           csr_bankarray_csrbank3_txfull_we = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out00_r;
reg           csr_bankarray_csrbank4_out00_re = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out00_w;
reg           csr_bankarray_csrbank4_out00_we = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out10_r;
reg           csr_bankarray_csrbank4_out10_re = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out10_w;
reg           csr_bankarray_csrbank4_out10_we = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out20_r;
reg           csr_bankarray_csrbank4_out20_re = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out20_w;
reg           csr_bankarray_csrbank4_out20_we = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out30_r;
reg           csr_bankarray_csrbank4_out30_re = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out30_w;
reg           csr_bankarray_csrbank4_out30_we = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out40_r;
reg           csr_bankarray_csrbank4_out40_re = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out40_w;
reg           csr_bankarray_csrbank4_out40_we = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out50_r;
reg           csr_bankarray_csrbank4_out50_re = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out50_w;
reg           csr_bankarray_csrbank4_out50_we = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out60_r;
reg           csr_bankarray_csrbank4_out60_re = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out60_w;
reg           csr_bankarray_csrbank4_out60_we = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out70_r;
reg           csr_bankarray_csrbank4_out70_re = 1'd0;
wire    [3:0] csr_bankarray_csrbank4_out70_w;
reg           csr_bankarray_csrbank4_out70_we = 1'd0;
wire          csr_bankarray_csrbank4_sel;
wire          csr_bankarray_csrbank5_sel;
wire    [7:0] csr_bankarray_csrbank5_state_high_r;
reg           csr_bankarray_csrbank5_state_high_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank5_state_high_w;
reg           csr_bankarray_csrbank5_state_high_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank5_state_low_r;
reg           csr_bankarray_csrbank5_state_low_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank5_state_low_w;
reg           csr_bankarray_csrbank5_state_low_we = 1'd0;
wire          csr_bankarray_csrbank6_en0_r;
reg           csr_bankarray_csrbank6_en0_re = 1'd0;
wire          csr_bankarray_csrbank6_en0_w;
reg           csr_bankarray_csrbank6_en0_we = 1'd0;
wire          csr_bankarray_csrbank6_ev_enable0_r;
reg           csr_bankarray_csrbank6_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank6_ev_enable0_w;
reg           csr_bankarray_csrbank6_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank6_ev_pending_r;
reg           csr_bankarray_csrbank6_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank6_ev_pending_w;
reg           csr_bankarray_csrbank6_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank6_ev_status_r;
reg           csr_bankarray_csrbank6_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank6_ev_status_w;
reg           csr_bankarray_csrbank6_ev_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank6_load0_r;
reg           csr_bankarray_csrbank6_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank6_load0_w;
reg           csr_bankarray_csrbank6_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank6_reload0_r;
reg           csr_bankarray_csrbank6_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank6_reload0_w;
reg           csr_bankarray_csrbank6_reload0_we = 1'd0;
wire          csr_bankarray_csrbank6_sel;
wire          csr_bankarray_csrbank6_update_value0_r;
reg           csr_bankarray_csrbank6_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank6_update_value0_w;
reg           csr_bankarray_csrbank6_update_value0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank6_value_r;
reg           csr_bankarray_csrbank6_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank6_value_w;
reg           csr_bankarray_csrbank6_value_we = 1'd0;
wire    [7:0] csr_bankarray_dat_r;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
wire          csr_bankarray_interface2_bank_bus_we;
wire   [13:0] csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface3_bank_bus_dat_w;
wire          csr_bankarray_interface3_bank_bus_we;
wire   [13:0] csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface4_bank_bus_dat_w;
wire          csr_bankarray_interface4_bank_bus_we;
wire   [13:0] csr_bankarray_interface5_bank_bus_adr;
reg    [31:0] csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface5_bank_bus_dat_w;
wire          csr_bankarray_interface5_bank_bus_we;
wire   [13:0] csr_bankarray_interface6_bank_bus_adr;
reg    [31:0] csr_bankarray_interface6_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface6_bank_bus_dat_w;
wire          csr_bankarray_interface6_bank_bus_we;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_sram_bus_adr;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
wire          csr_bankarray_sram_bus_we;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_we;
wire          done;
reg           error = 1'd0;
wire          eth_clk;
wire          eth_rst;
reg     [1:0] grant = 2'd0;
wire          idelay_clk;
wire          idelay_rst;
reg           in_re = 1'd0;
wire          in_status;
wire          in_we;
reg           interface0_ack = 1'd0;
wire   [29:0] interface0_adr;
wire    [1:0] interface0_bte;
wire    [2:0] interface0_cti;
wire          interface0_cyc;
reg    [31:0] interface0_dat_r = 32'd0;
wire   [31:0] interface0_dat_w;
reg           interface0_err = 1'd0;
wire    [3:0] interface0_sel;
wire          interface0_stb;
wire          interface0_we;
reg    [13:0] interface1_adr = 14'd0;
wire   [31:0] interface1_dat_r;
reg    [31:0] interface1_dat_w = 32'd0;
reg           interface1_we = 1'd0;
reg    [15:0] leds_chaser = 16'd0;
reg    [21:0] leds_count = 22'd2343750;
wire          leds_done;
reg    [15:0] leds_leds = 16'd0;
reg           leds_mode = 1'd0;
reg           leds_re = 1'd0;
reg    [15:0] leds_storage = 16'd0;
wire          leds_wait;
wire          mmcm_fb;
reg           my_uart_enable_re = 1'd0;
reg     [1:0] my_uart_enable_storage = 2'd0;
wire          my_uart_irq;
reg           my_uart_pads_tx_rs232phytx1_next_value1 = 1'd0;
reg           my_uart_pads_tx_rs232phytx1_next_value_ce1 = 1'd0;
reg     [1:0] my_uart_pending_r = 2'd0;
reg           my_uart_pending_re = 1'd0;
reg     [1:0] my_uart_pending_status = 2'd0;
wire          my_uart_pending_we;
wire          my_uart_rx0;
wire          my_uart_rx1;
wire          my_uart_rx2;
reg           my_uart_rx_clear = 1'd0;
reg     [3:0] my_uart_rx_fifo_consume = 4'd0;
wire          my_uart_rx_fifo_do_read;
wire          my_uart_rx_fifo_fifo_in_first;
wire          my_uart_rx_fifo_fifo_in_last;
wire    [7:0] my_uart_rx_fifo_fifo_in_payload_data;
wire          my_uart_rx_fifo_fifo_out_first;
wire          my_uart_rx_fifo_fifo_out_last;
wire    [7:0] my_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] my_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] my_uart_rx_fifo_level1;
reg     [3:0] my_uart_rx_fifo_produce = 4'd0;
wire    [3:0] my_uart_rx_fifo_rdport_adr;
wire    [9:0] my_uart_rx_fifo_rdport_dat_r;
wire          my_uart_rx_fifo_rdport_re;
wire          my_uart_rx_fifo_re;
reg           my_uart_rx_fifo_readable = 1'd0;
reg           my_uart_rx_fifo_replace = 1'd0;
wire          my_uart_rx_fifo_sink_first;
wire          my_uart_rx_fifo_sink_last;
wire    [7:0] my_uart_rx_fifo_sink_payload_data;
wire          my_uart_rx_fifo_sink_ready;
wire          my_uart_rx_fifo_sink_valid;
wire          my_uart_rx_fifo_source_first;
wire          my_uart_rx_fifo_source_last;
wire    [7:0] my_uart_rx_fifo_source_payload_data;
wire          my_uart_rx_fifo_source_ready;
wire          my_uart_rx_fifo_source_valid;
wire    [9:0] my_uart_rx_fifo_syncfifo_din;
wire    [9:0] my_uart_rx_fifo_syncfifo_dout;
wire          my_uart_rx_fifo_syncfifo_re;
wire          my_uart_rx_fifo_syncfifo_readable;
wire          my_uart_rx_fifo_syncfifo_we;
wire          my_uart_rx_fifo_syncfifo_writable;
reg     [3:0] my_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] my_uart_rx_fifo_wrport_dat_r;
wire    [9:0] my_uart_rx_fifo_wrport_dat_w;
wire          my_uart_rx_fifo_wrport_we;
reg           my_uart_rx_pending = 1'd0;
wire          my_uart_rx_status;
wire          my_uart_rx_trigger;
reg           my_uart_rx_trigger_d = 1'd0;
reg           my_uart_rxempty_re = 1'd0;
wire          my_uart_rxempty_status;
wire          my_uart_rxempty_we;
reg           my_uart_rxfull_re = 1'd0;
wire          my_uart_rxfull_status;
wire          my_uart_rxfull_we;
wire    [7:0] my_uart_rxtx_r;
reg           my_uart_rxtx_re = 1'd0;
wire    [7:0] my_uart_rxtx_w;
reg           my_uart_rxtx_we = 1'd0;
reg           my_uart_status_re = 1'd0;
reg     [1:0] my_uart_status_status = 2'd0;
wire          my_uart_status_we;
wire          my_uart_tx0;
wire          my_uart_tx1;
wire          my_uart_tx2;
reg           my_uart_tx_clear = 1'd0;
reg     [3:0] my_uart_tx_fifo_consume = 4'd0;
wire          my_uart_tx_fifo_do_read;
wire          my_uart_tx_fifo_fifo_in_first;
wire          my_uart_tx_fifo_fifo_in_last;
wire    [7:0] my_uart_tx_fifo_fifo_in_payload_data;
wire          my_uart_tx_fifo_fifo_out_first;
wire          my_uart_tx_fifo_fifo_out_last;
wire    [7:0] my_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] my_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] my_uart_tx_fifo_level1;
reg     [3:0] my_uart_tx_fifo_produce = 4'd0;
wire    [3:0] my_uart_tx_fifo_rdport_adr;
wire    [9:0] my_uart_tx_fifo_rdport_dat_r;
wire          my_uart_tx_fifo_rdport_re;
wire          my_uart_tx_fifo_re;
reg           my_uart_tx_fifo_readable = 1'd0;
reg           my_uart_tx_fifo_replace = 1'd0;
reg           my_uart_tx_fifo_sink_first = 1'd0;
reg           my_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] my_uart_tx_fifo_sink_payload_data;
wire          my_uart_tx_fifo_sink_ready;
wire          my_uart_tx_fifo_sink_valid;
wire          my_uart_tx_fifo_source_first;
wire          my_uart_tx_fifo_source_last;
wire    [7:0] my_uart_tx_fifo_source_payload_data;
wire          my_uart_tx_fifo_source_ready;
wire          my_uart_tx_fifo_source_valid;
wire    [9:0] my_uart_tx_fifo_syncfifo_din;
wire    [9:0] my_uart_tx_fifo_syncfifo_dout;
wire          my_uart_tx_fifo_syncfifo_re;
wire          my_uart_tx_fifo_syncfifo_readable;
wire          my_uart_tx_fifo_syncfifo_we;
wire          my_uart_tx_fifo_syncfifo_writable;
reg     [3:0] my_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] my_uart_tx_fifo_wrport_dat_r;
wire    [9:0] my_uart_tx_fifo_wrport_dat_w;
wire          my_uart_tx_fifo_wrport_we;
reg           my_uart_tx_pending = 1'd0;
wire          my_uart_tx_status;
wire          my_uart_tx_trigger;
reg           my_uart_tx_trigger_d = 1'd0;
reg           my_uart_txempty_re = 1'd0;
wire          my_uart_txempty_status;
wire          my_uart_txempty_we;
reg           my_uart_txfull_re = 1'd0;
wire          my_uart_txfull_status;
wire          my_uart_txfull_we;
wire          my_uart_uart_sink_first;
wire          my_uart_uart_sink_last;
wire    [7:0] my_uart_uart_sink_payload_data;
wire          my_uart_uart_sink_ready;
wire          my_uart_uart_sink_valid;
wire          my_uart_uart_source_first;
wire          my_uart_uart_source_last;
wire    [7:0] my_uart_uart_source_payload_data;
wire          my_uart_uart_source_ready;
wire          my_uart_uart_source_valid;
wire    [2:0] request;
wire          reset0;
wire          reset1;
wire          reset2;
wire          reset3;
wire          reset4;
wire          reset5;
wire          reset6;
wire          reset7;
reg           rs232phyrx0_next_state = 1'd0;
reg           rs232phyrx0_state = 1'd0;
reg           rs232phyrx1_next_state = 1'd0;
reg           rs232phyrx1_state = 1'd0;
reg           rs232phytx0_next_state = 1'd0;
reg           rs232phytx0_state = 1'd0;
reg           rs232phytx1_next_state = 1'd0;
reg           rs232phytx1_state = 1'd0;
reg     [3:0] rx_count = 4'd0;
reg     [3:0] rx_count_rs232phyrx1_next_value0 = 4'd0;
reg           rx_count_rs232phyrx1_next_value_ce0 = 1'd0;
reg     [7:0] rx_data = 8'd0;
reg     [7:0] rx_data_rs232phyrx1_next_value1 = 8'd0;
reg           rx_data_rs232phyrx1_next_value_ce1 = 1'd0;
reg           rx_enable = 1'd0;
reg    [31:0] rx_phase = 32'd0;
wire          rx_rx;
reg           rx_rx_d = 1'd0;
reg           rx_source_first = 1'd0;
reg           rx_source_last = 1'd0;
reg     [7:0] rx_source_payload_data = 8'd0;
wire          rx_source_ready;
reg           rx_source_valid = 1'd0;
reg           rx_tick = 1'd0;
reg     [7:0] seg_abcdefg = 8'd0;
wire          seg_ce;
reg    [16:0] seg_counter = 17'd0;
wire    [7:0] seg_cs0;
reg     [7:0] seg_cs1 = 8'd254;
reg           seg_enable = 1'd1;
reg           seg_out0_re = 1'd0;
reg     [3:0] seg_out0_storage = 4'd0;
reg           seg_out1_re = 1'd0;
reg     [3:0] seg_out1_storage = 4'd0;
reg           seg_out2_re = 1'd0;
reg     [3:0] seg_out2_storage = 4'd0;
reg           seg_out3_re = 1'd0;
reg     [3:0] seg_out3_storage = 4'd0;
reg           seg_out4_re = 1'd0;
reg     [3:0] seg_out4_storage = 4'd0;
reg           seg_out5_re = 1'd0;
reg     [3:0] seg_out5_storage = 4'd0;
reg           seg_out6_re = 1'd0;
reg     [3:0] seg_out6_storage = 4'd0;
reg           seg_out7_re = 1'd0;
reg     [3:0] seg_out7_storage = 4'd0;
reg     [3:0] seg_value = 4'd0;
reg           shared_ack = 1'd0;
wire   [29:0] shared_adr;
wire    [1:0] shared_bte;
wire    [2:0] shared_cti;
wire          shared_cyc;
reg    [31:0] shared_dat_r = 32'd0;
wire   [31:0] shared_dat_w;
wire          shared_err;
wire    [3:0] shared_sel;
wire          shared_stb;
wire          shared_we;
reg     [5:0] slave_sel = 6'd0;
reg     [5:0] slave_sel_r = 6'd0;
wire   [15:0] slice_proxy0;
wire   [15:0] slice_proxy1;
reg           socbushandler_adapted_interface_ack = 1'd0;
wire   [29:0] socbushandler_adapted_interface_adr;
wire    [1:0] socbushandler_adapted_interface_bte;
wire    [2:0] socbushandler_adapted_interface_cti;
wire          socbushandler_adapted_interface_cyc;
wire   [31:0] socbushandler_adapted_interface_dat_r;
wire   [31:0] socbushandler_adapted_interface_dat_w;
reg           socbushandler_adapted_interface_err = 1'd0;
wire    [3:0] socbushandler_adapted_interface_sel;
wire          socbushandler_adapted_interface_stb;
wire          socbushandler_adapted_interface_we;
reg           socbushandler_count = 1'd0;
reg    [31:0] socbushandler_dat_r = 32'd0;
wire          socbushandler_done;
reg           socbushandler_skip = 1'd0;
reg           state_high_re = 1'd0;
wire    [7:0] state_high_status;
wire          state_high_we;
reg           state_low_re = 1'd0;
wire    [7:0] state_low_status;
wire          state_low_we;
wire          sys2x_clk;
wire          sys2x_dqs_clk;
wire          sys2x_dqs_rst;
wire          sys2x_rst;
(* dont_touch = "true" *)
wire          sys_clk;
wire          sys_rst;
reg     [3:0] tx_count = 4'd0;
reg     [3:0] tx_count_rs232phytx1_next_value0 = 4'd0;
reg           tx_count_rs232phytx1_next_value_ce0 = 1'd0;
reg     [7:0] tx_data = 8'd0;
reg     [7:0] tx_data_rs232phytx1_next_value2 = 8'd0;
reg           tx_data_rs232phytx1_next_value_ce2 = 1'd0;
reg           tx_enable = 1'd0;
reg    [31:0] tx_phase = 32'd0;
wire          tx_sink_first;
wire          tx_sink_last;
wire    [7:0] tx_sink_payload_data;
reg           tx_sink_ready = 1'd0;
wire          tx_sink_valid;
reg           tx_tick = 1'd0;
reg     [2:0] uartbone_next_state = 3'd0;
reg     [2:0] uartbone_state = 3'd0;
wire          vga_clk;
wire          vga_rst;
wire          wait_1;
reg           wishbone2csr_next_state = 1'd0;
reg           wishbone2csr_state = 1'd0;
wire          xilinxasyncresetsynchronizerimpl0;
wire          xilinxasyncresetsynchronizerimpl0_rst_meta;
wire          xilinxasyncresetsynchronizerimpl1;
wire          xilinxasyncresetsynchronizerimpl1_rst_meta;
wire          xilinxasyncresetsynchronizerimpl2;
wire          xilinxasyncresetsynchronizerimpl2_rst_meta;
wire          xilinxasyncresetsynchronizerimpl3;
wire          xilinxasyncresetsynchronizerimpl3_rst_meta;
wire          xilinxasyncresetsynchronizerimpl4;
wire          xilinxasyncresetsynchronizerimpl4_rst_meta;
wire          xilinxasyncresetsynchronizerimpl5;
wire          xilinxasyncresetsynchronizerimpl5_rst_meta;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl1_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl1_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl2_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           xilinxmultiregimpl2_regs1 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign basesoc_cpu_reset = (basesoc_soc_rst | basesoc_cpu_rst);
always @(*) begin
    crg_rst <= 1'd0;
    if (basesoc_soc_rst) begin
        crg_rst <= 1'd1;
    end
end
assign basesoc_bus_error = error;
always @(*) begin
    basesoc_cpu_interrupt <= 32'd0;
    basesoc_cpu_interrupt[3] <= button_irq;
    basesoc_cpu_interrupt[2] <= my_uart_irq;
    basesoc_cpu_interrupt[1] <= basesoc_irq;
end
assign crg_reset = ((~cpu_reset) | crg_rst);
assign crg_clkin = clk100;
assign sys_clk = crg_clkout_buf0;
assign sys2x_clk = crg_clkout_buf1;
assign sys2x_dqs_clk = crg_clkout_buf2;
assign idelay_clk = crg_clkout_buf3;
assign eth_clk = crg_clkout_buf4;
assign vga_clk = crg_clkout_buf5;
assign socbushandler_done = (socbushandler_count == 1'd1);
always @(*) begin
    addCellularRAM_bus_cti <= 3'd0;
    case (socbushandler_adapted_interface_cti)
        2'd2: begin
            addCellularRAM_bus_cti <= 2'd2;
        end
        3'd7: begin
            addCellularRAM_bus_cti <= (socbushandler_done ? 3'd7 : 2'd2);
        end
        default: begin
            addCellularRAM_bus_cti <= 1'd0;
        end
    endcase
    if ((socbushandler_adapted_interface_bte != 1'd0)) begin
        addCellularRAM_bus_cti <= 1'd0;
    end
end
always @(*) begin
    addCellularRAM_bus_cyc <= 1'd0;
    addCellularRAM_bus_stb <= 1'd0;
    addCellularRAM_bus_we <= 1'd0;
    socbushandler_adapted_interface_ack <= 1'd0;
    socbushandler_skip <= 1'd0;
    if ((socbushandler_adapted_interface_stb & socbushandler_adapted_interface_cyc)) begin
        socbushandler_skip <= ((addCellularRAM_bus_sel == 1'd0) & (addCellularRAM_bus_cti == 1'd0));
        addCellularRAM_bus_cyc <= (~socbushandler_skip);
        addCellularRAM_bus_stb <= (~socbushandler_skip);
        addCellularRAM_bus_we <= socbushandler_adapted_interface_we;
        if ((addCellularRAM_bus_ack | socbushandler_skip)) begin
            socbushandler_adapted_interface_ack <= socbushandler_done;
        end
    end
end
assign addCellularRAM_bus_adr = {socbushandler_adapted_interface_adr, socbushandler_count};
always @(*) begin
    addCellularRAM_bus_dat_w <= 16'd0;
    case (socbushandler_count)
        1'd0: begin
            addCellularRAM_bus_dat_w <= socbushandler_adapted_interface_dat_w[31:0];
        end
        1'd1: begin
            addCellularRAM_bus_dat_w <= socbushandler_adapted_interface_dat_w[31:16];
        end
    endcase
end
always @(*) begin
    addCellularRAM_bus_sel <= 2'd0;
    case (socbushandler_count)
        1'd0: begin
            addCellularRAM_bus_sel <= socbushandler_adapted_interface_sel[3:0];
        end
        1'd1: begin
            addCellularRAM_bus_sel <= socbushandler_adapted_interface_sel[3:2];
        end
    endcase
end
assign socbushandler_adapted_interface_dat_r = {addCellularRAM_bus_dat_r, socbushandler_dat_r[31:16]};
assign shared_adr = array_muxed0;
assign shared_dat_w = array_muxed1;
assign shared_sel = array_muxed2;
assign shared_cyc = array_muxed3;
assign shared_stb = array_muxed4;
assign shared_we = array_muxed5;
assign shared_cti = array_muxed6;
assign shared_bte = array_muxed7;
assign basesoc_cpu_ibus_ibus_dat_r = shared_dat_r;
assign basesoc_cpu_dbus_dbus_dat_r = shared_dat_r;
assign basesoc_basesoc_wishbone_dat_r = shared_dat_r;
assign basesoc_cpu_ibus_ibus_ack = (shared_ack & (grant == 1'd0));
assign basesoc_cpu_dbus_dbus_ack = (shared_ack & (grant == 1'd1));
assign basesoc_basesoc_wishbone_ack = (shared_ack & (grant == 2'd2));
assign basesoc_cpu_ibus_ibus_err = (shared_err & (grant == 1'd0));
assign basesoc_cpu_dbus_dbus_err = (shared_err & (grant == 1'd1));
assign basesoc_basesoc_wishbone_err = (shared_err & (grant == 2'd2));
assign request = {basesoc_basesoc_wishbone_cyc, basesoc_cpu_dbus_dbus_cyc, basesoc_cpu_ibus_ibus_cyc};
always @(*) begin
    slave_sel <= 6'd0;
    slave_sel[0] <= (shared_adr[29:6] == 24'd15732480);
    slave_sel[1] <= (shared_adr[29:15] == 1'd0);
    slave_sel[2] <= (shared_adr[29:11] == 16'd32768);
    slave_sel[3] <= (shared_adr[29:22] == 7'd64);
    slave_sel[4] <= (shared_adr[29:3] == 26'd41943040);
    slave_sel[5] <= (shared_adr[29:14] == 16'd61440);
end
assign basesoc_cpu_vexriscv_debug_bus_adr = shared_adr;
assign basesoc_cpu_vexriscv_debug_bus_dat_w = shared_dat_w;
assign basesoc_cpu_vexriscv_debug_bus_sel = shared_sel;
assign basesoc_cpu_vexriscv_debug_bus_stb = shared_stb;
assign basesoc_cpu_vexriscv_debug_bus_we = shared_we;
assign basesoc_cpu_vexriscv_debug_bus_cti = shared_cti;
assign basesoc_cpu_vexriscv_debug_bus_bte = shared_bte;
assign basesoc_basesoc_ram_bus_adr = shared_adr;
assign basesoc_basesoc_ram_bus_dat_w = shared_dat_w;
assign basesoc_basesoc_ram_bus_sel = shared_sel;
assign basesoc_basesoc_ram_bus_stb = shared_stb;
assign basesoc_basesoc_ram_bus_we = shared_we;
assign basesoc_basesoc_ram_bus_cti = shared_cti;
assign basesoc_basesoc_ram_bus_bte = shared_bte;
assign basesoc_ram_bus_ram_bus_adr = shared_adr;
assign basesoc_ram_bus_ram_bus_dat_w = shared_dat_w;
assign basesoc_ram_bus_ram_bus_sel = shared_sel;
assign basesoc_ram_bus_ram_bus_stb = shared_stb;
assign basesoc_ram_bus_ram_bus_we = shared_we;
assign basesoc_ram_bus_ram_bus_cti = shared_cti;
assign basesoc_ram_bus_ram_bus_bte = shared_bte;
assign socbushandler_adapted_interface_adr = shared_adr;
assign socbushandler_adapted_interface_dat_w = shared_dat_w;
assign socbushandler_adapted_interface_sel = shared_sel;
assign socbushandler_adapted_interface_stb = shared_stb;
assign socbushandler_adapted_interface_we = shared_we;
assign socbushandler_adapted_interface_cti = shared_cti;
assign socbushandler_adapted_interface_bte = shared_bte;
assign addAdder_bus_adr = shared_adr;
assign addAdder_bus_dat_w = shared_dat_w;
assign addAdder_bus_sel = shared_sel;
assign addAdder_bus_stb = shared_stb;
assign addAdder_bus_we = shared_we;
assign addAdder_bus_cti = shared_cti;
assign addAdder_bus_bte = shared_bte;
assign interface0_adr = shared_adr;
assign interface0_dat_w = shared_dat_w;
assign interface0_sel = shared_sel;
assign interface0_stb = shared_stb;
assign interface0_we = shared_we;
assign interface0_cti = shared_cti;
assign interface0_bte = shared_bte;
assign basesoc_cpu_vexriscv_debug_bus_cyc = (shared_cyc & slave_sel[0]);
assign basesoc_basesoc_ram_bus_cyc = (shared_cyc & slave_sel[1]);
assign basesoc_ram_bus_ram_bus_cyc = (shared_cyc & slave_sel[2]);
assign socbushandler_adapted_interface_cyc = (shared_cyc & slave_sel[3]);
assign addAdder_bus_cyc = (shared_cyc & slave_sel[4]);
assign interface0_cyc = (shared_cyc & slave_sel[5]);
assign shared_err = (((((basesoc_cpu_vexriscv_debug_bus_err | basesoc_basesoc_ram_bus_err) | basesoc_ram_bus_ram_bus_err) | socbushandler_adapted_interface_err) | addAdder_bus_err) | interface0_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    error <= 1'd0;
    shared_ack <= 1'd0;
    shared_dat_r <= 32'd0;
    shared_ack <= (((((basesoc_cpu_vexriscv_debug_bus_ack | basesoc_basesoc_ram_bus_ack) | basesoc_ram_bus_ram_bus_ack) | socbushandler_adapted_interface_ack) | addAdder_bus_ack) | interface0_ack);
    shared_dat_r <= (((((({32{slave_sel_r[0]}} & basesoc_cpu_vexriscv_debug_bus_dat_r) | ({32{slave_sel_r[1]}} & basesoc_basesoc_ram_bus_dat_r)) | ({32{slave_sel_r[2]}} & basesoc_ram_bus_ram_bus_dat_r)) | ({32{slave_sel_r[3]}} & socbushandler_adapted_interface_dat_r)) | ({32{slave_sel_r[4]}} & addAdder_bus_dat_r)) | ({32{slave_sel_r[5]}} & interface0_dat_r));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
        shared_ack <= 1'd1;
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign basesoc_bus_errors_status = basesoc_bus_errors;
assign basesoc_basesoc_adr = basesoc_basesoc_ram_bus_adr[14:0];
assign basesoc_basesoc_ram_bus_dat_r = basesoc_basesoc_dat_r;
always @(*) begin
    basesoc_ram_we <= 4'd0;
    basesoc_ram_we[0] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[0]);
    basesoc_ram_we[1] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[1]);
    basesoc_ram_we[2] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[2]);
    basesoc_ram_we[3] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[3]);
end
assign basesoc_ram_adr = basesoc_ram_bus_ram_bus_adr[10:0];
assign basesoc_ram_bus_ram_bus_dat_r = basesoc_ram_dat_r;
assign basesoc_ram_dat_w = basesoc_ram_bus_ram_bus_dat_w;
always @(*) begin
    basesoc_basesoc_serial_tx_rs232phytx0_next_value1 <= 1'd0;
    basesoc_basesoc_serial_tx_rs232phytx0_next_value_ce1 <= 1'd0;
    basesoc_basesoc_tx_count_rs232phytx0_next_value0 <= 4'd0;
    basesoc_basesoc_tx_count_rs232phytx0_next_value_ce0 <= 1'd0;
    basesoc_basesoc_tx_data_rs232phytx0_next_value2 <= 8'd0;
    basesoc_basesoc_tx_data_rs232phytx0_next_value_ce2 <= 1'd0;
    basesoc_basesoc_tx_enable <= 1'd0;
    basesoc_basesoc_tx_sink_ready <= 1'd0;
    rs232phytx0_next_state <= 1'd0;
    rs232phytx0_next_state <= rs232phytx0_state;
    case (rs232phytx0_state)
        1'd1: begin
            basesoc_basesoc_tx_enable <= 1'd1;
            if (basesoc_basesoc_tx_tick) begin
                basesoc_basesoc_serial_tx_rs232phytx0_next_value1 <= basesoc_basesoc_tx_data;
                basesoc_basesoc_serial_tx_rs232phytx0_next_value_ce1 <= 1'd1;
                basesoc_basesoc_tx_count_rs232phytx0_next_value0 <= (basesoc_basesoc_tx_count + 1'd1);
                basesoc_basesoc_tx_count_rs232phytx0_next_value_ce0 <= 1'd1;
                basesoc_basesoc_tx_data_rs232phytx0_next_value2 <= {1'd1, basesoc_basesoc_tx_data[7:1]};
                basesoc_basesoc_tx_data_rs232phytx0_next_value_ce2 <= 1'd1;
                if ((basesoc_basesoc_tx_count == 4'd9)) begin
                    basesoc_basesoc_tx_sink_ready <= 1'd1;
                    rs232phytx0_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_basesoc_tx_count_rs232phytx0_next_value0 <= 1'd0;
            basesoc_basesoc_tx_count_rs232phytx0_next_value_ce0 <= 1'd1;
            basesoc_basesoc_serial_tx_rs232phytx0_next_value1 <= 1'd1;
            basesoc_basesoc_serial_tx_rs232phytx0_next_value_ce1 <= 1'd1;
            if (basesoc_basesoc_tx_sink_valid) begin
                basesoc_basesoc_serial_tx_rs232phytx0_next_value1 <= 1'd0;
                basesoc_basesoc_serial_tx_rs232phytx0_next_value_ce1 <= 1'd1;
                basesoc_basesoc_tx_data_rs232phytx0_next_value2 <= basesoc_basesoc_tx_sink_payload_data;
                basesoc_basesoc_tx_data_rs232phytx0_next_value_ce2 <= 1'd1;
                rs232phytx0_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    basesoc_basesoc_rx_count_rs232phyrx0_next_value0 <= 4'd0;
    basesoc_basesoc_rx_count_rs232phyrx0_next_value_ce0 <= 1'd0;
    basesoc_basesoc_rx_data_rs232phyrx0_next_value1 <= 8'd0;
    basesoc_basesoc_rx_data_rs232phyrx0_next_value_ce1 <= 1'd0;
    basesoc_basesoc_rx_enable <= 1'd0;
    basesoc_basesoc_rx_source_payload_data <= 8'd0;
    basesoc_basesoc_rx_source_valid <= 1'd0;
    rs232phyrx0_next_state <= 1'd0;
    rs232phyrx0_next_state <= rs232phyrx0_state;
    case (rs232phyrx0_state)
        1'd1: begin
            basesoc_basesoc_rx_enable <= 1'd1;
            if (basesoc_basesoc_rx_tick) begin
                basesoc_basesoc_rx_count_rs232phyrx0_next_value0 <= (basesoc_basesoc_rx_count + 1'd1);
                basesoc_basesoc_rx_count_rs232phyrx0_next_value_ce0 <= 1'd1;
                basesoc_basesoc_rx_data_rs232phyrx0_next_value1 <= {basesoc_basesoc_rx_rx, basesoc_basesoc_rx_data[7:1]};
                basesoc_basesoc_rx_data_rs232phyrx0_next_value_ce1 <= 1'd1;
                if ((basesoc_basesoc_rx_count == 4'd9)) begin
                    basesoc_basesoc_rx_source_valid <= (basesoc_basesoc_rx_rx == 1'd1);
                    basesoc_basesoc_rx_source_payload_data <= basesoc_basesoc_rx_data;
                    rs232phyrx0_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_basesoc_rx_count_rs232phyrx0_next_value0 <= 1'd0;
            basesoc_basesoc_rx_count_rs232phyrx0_next_value_ce0 <= 1'd1;
            if (((basesoc_basesoc_rx_rx == 1'd0) & (basesoc_basesoc_rx_rx_d == 1'd1))) begin
                rs232phyrx0_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_basesoc_wait = (~basesoc_basesoc_is_ongoing);
assign basesoc_basesoc_reset = basesoc_basesoc_done;
assign basesoc_basesoc_wishbone_adr = basesoc_basesoc_address;
assign basesoc_basesoc_wishbone_dat_w = basesoc_basesoc_data;
assign basesoc_basesoc_wishbone_sel = 4'd15;
always @(*) begin
    basesoc_basesoc_tx_sink_payload_data <= 8'd0;
    case (basesoc_basesoc_data_bytes_count)
        1'd0: begin
            basesoc_basesoc_tx_sink_payload_data <= basesoc_basesoc_data[31:24];
        end
        1'd1: begin
            basesoc_basesoc_tx_sink_payload_data <= basesoc_basesoc_data[31:16];
        end
        2'd2: begin
            basesoc_basesoc_tx_sink_payload_data <= basesoc_basesoc_data[31:8];
        end
        2'd3: begin
            basesoc_basesoc_tx_sink_payload_data <= basesoc_basesoc_data[31:0];
        end
    endcase
end
assign basesoc_basesoc_tx_sink_last = ((basesoc_basesoc_data_bytes_count == 2'd3) & (basesoc_basesoc_words_count == (basesoc_basesoc_length - 1'd1)));
always @(*) begin
    basesoc_basesoc_addr_bytes_count_uartbone_next_value1 <= 2'd0;
    basesoc_basesoc_addr_bytes_count_uartbone_next_value_ce1 <= 1'd0;
    basesoc_basesoc_address_uartbone_next_value5 <= 32'd0;
    basesoc_basesoc_address_uartbone_next_value_ce5 <= 1'd0;
    basesoc_basesoc_cmd_uartbone_next_value3 <= 8'd0;
    basesoc_basesoc_cmd_uartbone_next_value_ce3 <= 1'd0;
    basesoc_basesoc_data_bytes_count_uartbone_next_value0 <= 2'd0;
    basesoc_basesoc_data_bytes_count_uartbone_next_value_ce0 <= 1'd0;
    basesoc_basesoc_data_uartbone_next_value7 <= 32'd0;
    basesoc_basesoc_data_uartbone_next_value_ce7 <= 1'd0;
    basesoc_basesoc_incr_uartbone_next_value6 <= 1'd0;
    basesoc_basesoc_incr_uartbone_next_value_ce6 <= 1'd0;
    basesoc_basesoc_is_ongoing <= 1'd0;
    basesoc_basesoc_length_uartbone_next_value4 <= 8'd0;
    basesoc_basesoc_length_uartbone_next_value_ce4 <= 1'd0;
    basesoc_basesoc_rx_source_ready <= 1'd0;
    basesoc_basesoc_tx_sink_valid <= 1'd0;
    basesoc_basesoc_wishbone_cyc <= 1'd0;
    basesoc_basesoc_wishbone_stb <= 1'd0;
    basesoc_basesoc_wishbone_we <= 1'd0;
    basesoc_basesoc_words_count_uartbone_next_value2 <= 8'd0;
    basesoc_basesoc_words_count_uartbone_next_value_ce2 <= 1'd0;
    uartbone_next_state <= 3'd0;
    uartbone_next_state <= uartbone_state;
    case (uartbone_state)
        1'd1: begin
            basesoc_basesoc_rx_source_ready <= 1'd1;
            if (basesoc_basesoc_rx_source_valid) begin
                basesoc_basesoc_length_uartbone_next_value4 <= basesoc_basesoc_rx_source_payload_data;
                basesoc_basesoc_length_uartbone_next_value_ce4 <= 1'd1;
                uartbone_next_state <= 2'd2;
            end
        end
        2'd2: begin
            basesoc_basesoc_rx_source_ready <= 1'd1;
            if (basesoc_basesoc_rx_source_valid) begin
                basesoc_basesoc_address_uartbone_next_value5 <= {basesoc_basesoc_address, basesoc_basesoc_rx_source_payload_data};
                basesoc_basesoc_address_uartbone_next_value_ce5 <= 1'd1;
                basesoc_basesoc_addr_bytes_count_uartbone_next_value1 <= (basesoc_basesoc_addr_bytes_count + 1'd1);
                basesoc_basesoc_addr_bytes_count_uartbone_next_value_ce1 <= 1'd1;
                if ((basesoc_basesoc_addr_bytes_count == 2'd3)) begin
                    if (((basesoc_basesoc_cmd == 1'd1) | (basesoc_basesoc_cmd == 2'd3))) begin
                        basesoc_basesoc_incr_uartbone_next_value6 <= (basesoc_basesoc_cmd == 1'd1);
                        basesoc_basesoc_incr_uartbone_next_value_ce6 <= 1'd1;
                        uartbone_next_state <= 2'd3;
                    end else begin
                        if (((basesoc_basesoc_cmd == 2'd2) | (basesoc_basesoc_cmd == 3'd4))) begin
                            basesoc_basesoc_incr_uartbone_next_value6 <= (basesoc_basesoc_cmd == 2'd2);
                            basesoc_basesoc_incr_uartbone_next_value_ce6 <= 1'd1;
                            uartbone_next_state <= 3'd5;
                        end else begin
                            uartbone_next_state <= 1'd0;
                        end
                    end
                end
            end
        end
        2'd3: begin
            basesoc_basesoc_rx_source_ready <= 1'd1;
            if (basesoc_basesoc_rx_source_valid) begin
                basesoc_basesoc_data_uartbone_next_value7 <= {basesoc_basesoc_data, basesoc_basesoc_rx_source_payload_data};
                basesoc_basesoc_data_uartbone_next_value_ce7 <= 1'd1;
                basesoc_basesoc_data_bytes_count_uartbone_next_value0 <= (basesoc_basesoc_data_bytes_count + 1'd1);
                basesoc_basesoc_data_bytes_count_uartbone_next_value_ce0 <= 1'd1;
                if ((basesoc_basesoc_data_bytes_count == 2'd3)) begin
                    uartbone_next_state <= 3'd4;
                end
            end
        end
        3'd4: begin
            basesoc_basesoc_rx_source_ready <= 1'd0;
            basesoc_basesoc_wishbone_stb <= 1'd1;
            basesoc_basesoc_wishbone_we <= 1'd1;
            basesoc_basesoc_wishbone_cyc <= 1'd1;
            if (basesoc_basesoc_wishbone_ack) begin
                basesoc_basesoc_words_count_uartbone_next_value2 <= (basesoc_basesoc_words_count + 1'd1);
                basesoc_basesoc_words_count_uartbone_next_value_ce2 <= 1'd1;
                basesoc_basesoc_address_uartbone_next_value5 <= (basesoc_basesoc_address + basesoc_basesoc_incr);
                basesoc_basesoc_address_uartbone_next_value_ce5 <= 1'd1;
                if ((basesoc_basesoc_words_count == (basesoc_basesoc_length - 1'd1))) begin
                    uartbone_next_state <= 1'd0;
                end else begin
                    uartbone_next_state <= 2'd3;
                end
            end
        end
        3'd5: begin
            basesoc_basesoc_rx_source_ready <= 1'd0;
            basesoc_basesoc_wishbone_stb <= 1'd1;
            basesoc_basesoc_wishbone_we <= 1'd0;
            basesoc_basesoc_wishbone_cyc <= 1'd1;
            if (basesoc_basesoc_wishbone_ack) begin
                basesoc_basesoc_data_uartbone_next_value7 <= basesoc_basesoc_wishbone_dat_r;
                basesoc_basesoc_data_uartbone_next_value_ce7 <= 1'd1;
                uartbone_next_state <= 3'd6;
            end
        end
        3'd6: begin
            basesoc_basesoc_rx_source_ready <= 1'd0;
            basesoc_basesoc_tx_sink_valid <= 1'd1;
            if (basesoc_basesoc_tx_sink_ready) begin
                basesoc_basesoc_data_bytes_count_uartbone_next_value0 <= (basesoc_basesoc_data_bytes_count + 1'd1);
                basesoc_basesoc_data_bytes_count_uartbone_next_value_ce0 <= 1'd1;
                if ((basesoc_basesoc_data_bytes_count == 2'd3)) begin
                    basesoc_basesoc_words_count_uartbone_next_value2 <= (basesoc_basesoc_words_count + 1'd1);
                    basesoc_basesoc_words_count_uartbone_next_value_ce2 <= 1'd1;
                    basesoc_basesoc_address_uartbone_next_value5 <= (basesoc_basesoc_address + basesoc_basesoc_incr);
                    basesoc_basesoc_address_uartbone_next_value_ce5 <= 1'd1;
                    if ((basesoc_basesoc_words_count == (basesoc_basesoc_length - 1'd1))) begin
                        uartbone_next_state <= 1'd0;
                    end else begin
                        uartbone_next_state <= 3'd5;
                    end
                end
            end
        end
        default: begin
            basesoc_basesoc_is_ongoing <= 1'd1;
            basesoc_basesoc_rx_source_ready <= 1'd1;
            basesoc_basesoc_data_bytes_count_uartbone_next_value0 <= 1'd0;
            basesoc_basesoc_data_bytes_count_uartbone_next_value_ce0 <= 1'd1;
            basesoc_basesoc_addr_bytes_count_uartbone_next_value1 <= 1'd0;
            basesoc_basesoc_addr_bytes_count_uartbone_next_value_ce1 <= 1'd1;
            basesoc_basesoc_words_count_uartbone_next_value2 <= 1'd0;
            basesoc_basesoc_words_count_uartbone_next_value_ce2 <= 1'd1;
            if (basesoc_basesoc_rx_source_valid) begin
                basesoc_basesoc_cmd_uartbone_next_value3 <= basesoc_basesoc_rx_source_payload_data;
                basesoc_basesoc_cmd_uartbone_next_value_ce3 <= 1'd1;
                uartbone_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_basesoc_done = (basesoc_basesoc_count == 1'd0);
assign basesoc_zero_trigger = (basesoc_value == 1'd0);
assign basesoc_zero0 = basesoc_zero_status;
assign basesoc_zero1 = basesoc_zero_pending;
always @(*) begin
    basesoc_zero_clear <= 1'd0;
    if ((basesoc_pending_re & basesoc_pending_r)) begin
        basesoc_zero_clear <= 1'd1;
    end
end
assign basesoc_irq = (basesoc_pending_status & basesoc_enable_storage);
assign basesoc_zero_status = basesoc_zero_trigger;
always @(*) begin
    addCellularRAM_bus_ack_cellularram_next_value1 <= 1'd0;
    addCellularRAM_bus_ack_cellularram_next_value_ce1 <= 1'd0;
    addCellularRAM_bus_dat_r_cellularram_next_value13 <= 16'd0;
    addCellularRAM_bus_dat_r_cellularram_next_value_ce13 <= 1'd0;
    addCellularRAM_cellularram_addr_cellularram_next_value9 <= 23'd0;
    addCellularRAM_cellularram_addr_cellularram_next_value_ce9 <= 1'd0;
    addCellularRAM_cellularram_adv_cellularram_next_value3 <= 1'd0;
    addCellularRAM_cellularram_adv_cellularram_next_value_ce3 <= 1'd0;
    addCellularRAM_cellularram_cen_cellularram_next_value2 <= 1'd0;
    addCellularRAM_cellularram_cen_cellularram_next_value_ce2 <= 1'd0;
    addCellularRAM_cellularram_clk_cellularram_next_value6 <= 1'd0;
    addCellularRAM_cellularram_clk_cellularram_next_value_ce6 <= 1'd0;
    addCellularRAM_cellularram_cre_cellularram_next_value7 <= 1'd0;
    addCellularRAM_cellularram_cre_cellularram_next_value_ce7 <= 1'd0;
    addCellularRAM_cellularram_lb_cellularram_next_value4 <= 1'd0;
    addCellularRAM_cellularram_lb_cellularram_next_value_ce4 <= 1'd0;
    addCellularRAM_cellularram_oen_cellularram_next_value11 <= 1'd0;
    addCellularRAM_cellularram_oen_cellularram_next_value_ce11 <= 1'd0;
    addCellularRAM_cellularram_ub_cellularram_next_value5 <= 1'd0;
    addCellularRAM_cellularram_ub_cellularram_next_value_ce5 <= 1'd0;
    addCellularRAM_cellularram_wen_cellularram_next_value10 <= 1'd0;
    addCellularRAM_cellularram_wen_cellularram_next_value_ce10 <= 1'd0;
    addCellularRAM_delaycounter_cellularram_next_value0 <= 5'd0;
    addCellularRAM_delaycounter_cellularram_next_value_ce0 <= 1'd0;
    addCellularRAM_o_cellularram_next_value12 <= 16'd0;
    addCellularRAM_o_cellularram_next_value_ce12 <= 1'd0;
    addCellularRAM_oe_cellularram_next_value8 <= 1'd0;
    addCellularRAM_oe_cellularram_next_value_ce8 <= 1'd0;
    cellularram_next_state <= 3'd0;
    cellularram_next_state <= cellularram_state;
    case (cellularram_state)
        1'd1: begin
            addCellularRAM_delaycounter_cellularram_next_value0 <= 1'd0;
            addCellularRAM_delaycounter_cellularram_next_value_ce0 <= 1'd1;
            addCellularRAM_bus_ack_cellularram_next_value1 <= 1'd0;
            addCellularRAM_bus_ack_cellularram_next_value_ce1 <= 1'd1;
            addCellularRAM_cellularram_cen_cellularram_next_value2 <= 1'd1;
            addCellularRAM_cellularram_cen_cellularram_next_value_ce2 <= 1'd1;
            addCellularRAM_cellularram_adv_cellularram_next_value3 <= 1'd1;
            addCellularRAM_cellularram_adv_cellularram_next_value_ce3 <= 1'd1;
            addCellularRAM_cellularram_lb_cellularram_next_value4 <= 1'd1;
            addCellularRAM_cellularram_lb_cellularram_next_value_ce4 <= 1'd1;
            addCellularRAM_cellularram_ub_cellularram_next_value5 <= 1'd1;
            addCellularRAM_cellularram_ub_cellularram_next_value_ce5 <= 1'd1;
            addCellularRAM_cellularram_clk_cellularram_next_value6 <= 1'd0;
            addCellularRAM_cellularram_clk_cellularram_next_value_ce6 <= 1'd1;
            addCellularRAM_cellularram_cre_cellularram_next_value7 <= 1'd0;
            addCellularRAM_cellularram_cre_cellularram_next_value_ce7 <= 1'd1;
            addCellularRAM_oe_cellularram_next_value8 <= 1'd0;
            addCellularRAM_oe_cellularram_next_value_ce8 <= 1'd1;
            cellularram_next_state <= 2'd2;
        end
        2'd2: begin
            if ((addCellularRAM_bus_stb & addCellularRAM_bus_cyc)) begin
                addCellularRAM_cellularram_lb_cellularram_next_value4 <= (~addCellularRAM_bus_sel[0]);
                addCellularRAM_cellularram_lb_cellularram_next_value_ce4 <= 1'd1;
                addCellularRAM_cellularram_ub_cellularram_next_value5 <= (~addCellularRAM_bus_sel[1]);
                addCellularRAM_cellularram_ub_cellularram_next_value_ce5 <= 1'd1;
                addCellularRAM_delaycounter_cellularram_next_value0 <= 1'd0;
                addCellularRAM_delaycounter_cellularram_next_value_ce0 <= 1'd1;
                addCellularRAM_cellularram_cen_cellularram_next_value2 <= 1'd0;
                addCellularRAM_cellularram_cen_cellularram_next_value_ce2 <= 1'd1;
                addCellularRAM_cellularram_adv_cellularram_next_value3 <= 1'd0;
                addCellularRAM_cellularram_adv_cellularram_next_value_ce3 <= 1'd1;
                addCellularRAM_cellularram_addr_cellularram_next_value9 <= addCellularRAM_bus_adr[22:0];
                addCellularRAM_cellularram_addr_cellularram_next_value_ce9 <= 1'd1;
                if (addCellularRAM_bus_we) begin
                    addCellularRAM_cellularram_wen_cellularram_next_value10 <= 1'd0;
                    addCellularRAM_cellularram_wen_cellularram_next_value_ce10 <= 1'd1;
                    addCellularRAM_cellularram_oen_cellularram_next_value11 <= 1'd1;
                    addCellularRAM_cellularram_oen_cellularram_next_value_ce11 <= 1'd1;
                    addCellularRAM_oe_cellularram_next_value8 <= 1'd1;
                    addCellularRAM_oe_cellularram_next_value_ce8 <= 1'd1;
                    addCellularRAM_o_cellularram_next_value12 <= addCellularRAM_bus_dat_w[15:0];
                    addCellularRAM_o_cellularram_next_value_ce12 <= 1'd1;
                    cellularram_next_state <= 2'd3;
                end else begin
                    addCellularRAM_cellularram_wen_cellularram_next_value10 <= 1'd1;
                    addCellularRAM_cellularram_wen_cellularram_next_value_ce10 <= 1'd1;
                    addCellularRAM_cellularram_oen_cellularram_next_value11 <= 1'd0;
                    addCellularRAM_cellularram_oen_cellularram_next_value_ce11 <= 1'd1;
                    addCellularRAM_oe_cellularram_next_value8 <= 1'd0;
                    addCellularRAM_oe_cellularram_next_value_ce8 <= 1'd1;
                    cellularram_next_state <= 3'd4;
                end
            end
        end
        2'd3: begin
            addCellularRAM_delaycounter_cellularram_next_value0 <= (addCellularRAM_delaycounter + 1'd1);
            addCellularRAM_delaycounter_cellularram_next_value_ce0 <= 1'd1;
            if ((addCellularRAM_delaycounter == 3'd7)) begin
                addCellularRAM_bus_ack_cellularram_next_value1 <= 1'd1;
                addCellularRAM_bus_ack_cellularram_next_value_ce1 <= 1'd1;
                cellularram_next_state <= 1'd1;
            end
        end
        3'd4: begin
            addCellularRAM_delaycounter_cellularram_next_value0 <= (addCellularRAM_delaycounter + 1'd1);
            addCellularRAM_delaycounter_cellularram_next_value_ce0 <= 1'd1;
            addCellularRAM_bus_dat_r_cellularram_next_value13 <= addCellularRAM_i[15:0];
            addCellularRAM_bus_dat_r_cellularram_next_value_ce13 <= 1'd1;
            if ((addCellularRAM_delaycounter == 3'd7)) begin
                addCellularRAM_bus_ack_cellularram_next_value1 <= 1'd1;
                addCellularRAM_bus_ack_cellularram_next_value_ce1 <= 1'd1;
                cellularram_next_state <= 1'd1;
            end
        end
        default: begin
            cellularram_next_state <= 1'd1;
        end
    endcase
end
always @(*) begin
    my_uart_pads_tx_rs232phytx1_next_value1 <= 1'd0;
    my_uart_pads_tx_rs232phytx1_next_value_ce1 <= 1'd0;
    rs232phytx1_next_state <= 1'd0;
    tx_count_rs232phytx1_next_value0 <= 4'd0;
    tx_count_rs232phytx1_next_value_ce0 <= 1'd0;
    tx_data_rs232phytx1_next_value2 <= 8'd0;
    tx_data_rs232phytx1_next_value_ce2 <= 1'd0;
    tx_enable <= 1'd0;
    tx_sink_ready <= 1'd0;
    rs232phytx1_next_state <= rs232phytx1_state;
    case (rs232phytx1_state)
        1'd1: begin
            tx_enable <= 1'd1;
            if (tx_tick) begin
                my_uart_pads_tx_rs232phytx1_next_value1 <= tx_data;
                my_uart_pads_tx_rs232phytx1_next_value_ce1 <= 1'd1;
                tx_count_rs232phytx1_next_value0 <= (tx_count + 1'd1);
                tx_count_rs232phytx1_next_value_ce0 <= 1'd1;
                tx_data_rs232phytx1_next_value2 <= {1'd1, tx_data[7:1]};
                tx_data_rs232phytx1_next_value_ce2 <= 1'd1;
                if ((tx_count == 4'd9)) begin
                    tx_sink_ready <= 1'd1;
                    rs232phytx1_next_state <= 1'd0;
                end
            end
        end
        default: begin
            tx_count_rs232phytx1_next_value0 <= 1'd0;
            tx_count_rs232phytx1_next_value_ce0 <= 1'd1;
            my_uart_pads_tx_rs232phytx1_next_value1 <= 1'd1;
            my_uart_pads_tx_rs232phytx1_next_value_ce1 <= 1'd1;
            if (tx_sink_valid) begin
                my_uart_pads_tx_rs232phytx1_next_value1 <= 1'd0;
                my_uart_pads_tx_rs232phytx1_next_value_ce1 <= 1'd1;
                tx_data_rs232phytx1_next_value2 <= tx_sink_payload_data;
                tx_data_rs232phytx1_next_value_ce2 <= 1'd1;
                rs232phytx1_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    rs232phyrx1_next_state <= 1'd0;
    rx_count_rs232phyrx1_next_value0 <= 4'd0;
    rx_count_rs232phyrx1_next_value_ce0 <= 1'd0;
    rx_data_rs232phyrx1_next_value1 <= 8'd0;
    rx_data_rs232phyrx1_next_value_ce1 <= 1'd0;
    rx_enable <= 1'd0;
    rx_source_payload_data <= 8'd0;
    rx_source_valid <= 1'd0;
    rs232phyrx1_next_state <= rs232phyrx1_state;
    case (rs232phyrx1_state)
        1'd1: begin
            rx_enable <= 1'd1;
            if (rx_tick) begin
                rx_count_rs232phyrx1_next_value0 <= (rx_count + 1'd1);
                rx_count_rs232phyrx1_next_value_ce0 <= 1'd1;
                rx_data_rs232phyrx1_next_value1 <= {rx_rx, rx_data[7:1]};
                rx_data_rs232phyrx1_next_value_ce1 <= 1'd1;
                if ((rx_count == 4'd9)) begin
                    rx_source_valid <= (rx_rx == 1'd1);
                    rx_source_payload_data <= rx_data;
                    rs232phyrx1_next_state <= 1'd0;
                end
            end
        end
        default: begin
            rx_count_rs232phyrx1_next_value0 <= 1'd0;
            rx_count_rs232phyrx1_next_value_ce0 <= 1'd1;
            if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
                rs232phyrx1_next_state <= 1'd1;
            end
        end
    endcase
end
assign my_uart_uart_sink_valid = rx_source_valid;
assign rx_source_ready = my_uart_uart_sink_ready;
assign my_uart_uart_sink_first = rx_source_first;
assign my_uart_uart_sink_last = rx_source_last;
assign my_uart_uart_sink_payload_data = rx_source_payload_data;
assign tx_sink_valid = my_uart_uart_source_valid;
assign my_uart_uart_source_ready = tx_sink_ready;
assign tx_sink_first = my_uart_uart_source_first;
assign tx_sink_last = my_uart_uart_source_last;
assign tx_sink_payload_data = my_uart_uart_source_payload_data;
assign my_uart_tx_fifo_sink_valid = my_uart_rxtx_re;
assign my_uart_tx_fifo_sink_payload_data = my_uart_rxtx_r;
assign my_uart_uart_source_valid = my_uart_tx_fifo_source_valid;
assign my_uart_tx_fifo_source_ready = my_uart_uart_source_ready;
assign my_uart_uart_source_first = my_uart_tx_fifo_source_first;
assign my_uart_uart_source_last = my_uart_tx_fifo_source_last;
assign my_uart_uart_source_payload_data = my_uart_tx_fifo_source_payload_data;
assign my_uart_txfull_status = (~my_uart_tx_fifo_sink_ready);
assign my_uart_txempty_status = (~my_uart_tx_fifo_source_valid);
assign my_uart_tx_trigger = my_uart_tx_fifo_sink_ready;
assign my_uart_rx_fifo_sink_valid = my_uart_uart_sink_valid;
assign my_uart_uart_sink_ready = my_uart_rx_fifo_sink_ready;
assign my_uart_rx_fifo_sink_first = my_uart_uart_sink_first;
assign my_uart_rx_fifo_sink_last = my_uart_uart_sink_last;
assign my_uart_rx_fifo_sink_payload_data = my_uart_uart_sink_payload_data;
assign my_uart_rxtx_w = my_uart_rx_fifo_source_payload_data;
assign my_uart_rx_fifo_source_ready = (my_uart_rx_clear | (1'd0 & my_uart_rxtx_we));
assign my_uart_rxempty_status = (~my_uart_rx_fifo_source_valid);
assign my_uart_rxfull_status = (~my_uart_rx_fifo_sink_ready);
assign my_uart_rx_trigger = my_uart_rx_fifo_source_valid;
assign my_uart_tx0 = my_uart_tx_status;
assign my_uart_tx1 = my_uart_tx_pending;
always @(*) begin
    my_uart_tx_clear <= 1'd0;
    if ((my_uart_pending_re & my_uart_pending_r[0])) begin
        my_uart_tx_clear <= 1'd1;
    end
end
assign my_uart_rx0 = my_uart_rx_status;
assign my_uart_rx1 = my_uart_rx_pending;
always @(*) begin
    my_uart_rx_clear <= 1'd0;
    if ((my_uart_pending_re & my_uart_pending_r[1])) begin
        my_uart_rx_clear <= 1'd1;
    end
end
assign my_uart_irq = ((my_uart_pending_status[0] & my_uart_enable_storage[0]) | (my_uart_pending_status[1] & my_uart_enable_storage[1]));
assign my_uart_tx_status = my_uart_tx_trigger;
assign my_uart_rx_status = my_uart_rx_trigger;
assign my_uart_tx_fifo_syncfifo_din = {my_uart_tx_fifo_fifo_in_last, my_uart_tx_fifo_fifo_in_first, my_uart_tx_fifo_fifo_in_payload_data};
assign {my_uart_tx_fifo_fifo_out_last, my_uart_tx_fifo_fifo_out_first, my_uart_tx_fifo_fifo_out_payload_data} = my_uart_tx_fifo_syncfifo_dout;
assign my_uart_tx_fifo_sink_ready = my_uart_tx_fifo_syncfifo_writable;
assign my_uart_tx_fifo_syncfifo_we = my_uart_tx_fifo_sink_valid;
assign my_uart_tx_fifo_fifo_in_first = my_uart_tx_fifo_sink_first;
assign my_uart_tx_fifo_fifo_in_last = my_uart_tx_fifo_sink_last;
assign my_uart_tx_fifo_fifo_in_payload_data = my_uart_tx_fifo_sink_payload_data;
assign my_uart_tx_fifo_source_valid = my_uart_tx_fifo_readable;
assign my_uart_tx_fifo_source_first = my_uart_tx_fifo_fifo_out_first;
assign my_uart_tx_fifo_source_last = my_uart_tx_fifo_fifo_out_last;
assign my_uart_tx_fifo_source_payload_data = my_uart_tx_fifo_fifo_out_payload_data;
assign my_uart_tx_fifo_re = my_uart_tx_fifo_source_ready;
assign my_uart_tx_fifo_syncfifo_re = (my_uart_tx_fifo_syncfifo_readable & ((~my_uart_tx_fifo_readable) | my_uart_tx_fifo_re));
assign my_uart_tx_fifo_level1 = (my_uart_tx_fifo_level0 + my_uart_tx_fifo_readable);
always @(*) begin
    my_uart_tx_fifo_wrport_adr <= 4'd0;
    if (my_uart_tx_fifo_replace) begin
        my_uart_tx_fifo_wrport_adr <= (my_uart_tx_fifo_produce - 1'd1);
    end else begin
        my_uart_tx_fifo_wrport_adr <= my_uart_tx_fifo_produce;
    end
end
assign my_uart_tx_fifo_wrport_dat_w = my_uart_tx_fifo_syncfifo_din;
assign my_uart_tx_fifo_wrport_we = (my_uart_tx_fifo_syncfifo_we & (my_uart_tx_fifo_syncfifo_writable | my_uart_tx_fifo_replace));
assign my_uart_tx_fifo_do_read = (my_uart_tx_fifo_syncfifo_readable & my_uart_tx_fifo_syncfifo_re);
assign my_uart_tx_fifo_rdport_adr = my_uart_tx_fifo_consume;
assign my_uart_tx_fifo_syncfifo_dout = my_uart_tx_fifo_rdport_dat_r;
assign my_uart_tx_fifo_rdport_re = my_uart_tx_fifo_do_read;
assign my_uart_tx_fifo_syncfifo_writable = (my_uart_tx_fifo_level0 != 5'd16);
assign my_uart_tx_fifo_syncfifo_readable = (my_uart_tx_fifo_level0 != 1'd0);
assign my_uart_rx_fifo_syncfifo_din = {my_uart_rx_fifo_fifo_in_last, my_uart_rx_fifo_fifo_in_first, my_uart_rx_fifo_fifo_in_payload_data};
assign {my_uart_rx_fifo_fifo_out_last, my_uart_rx_fifo_fifo_out_first, my_uart_rx_fifo_fifo_out_payload_data} = my_uart_rx_fifo_syncfifo_dout;
assign my_uart_rx_fifo_sink_ready = my_uart_rx_fifo_syncfifo_writable;
assign my_uart_rx_fifo_syncfifo_we = my_uart_rx_fifo_sink_valid;
assign my_uart_rx_fifo_fifo_in_first = my_uart_rx_fifo_sink_first;
assign my_uart_rx_fifo_fifo_in_last = my_uart_rx_fifo_sink_last;
assign my_uart_rx_fifo_fifo_in_payload_data = my_uart_rx_fifo_sink_payload_data;
assign my_uart_rx_fifo_source_valid = my_uart_rx_fifo_readable;
assign my_uart_rx_fifo_source_first = my_uart_rx_fifo_fifo_out_first;
assign my_uart_rx_fifo_source_last = my_uart_rx_fifo_fifo_out_last;
assign my_uart_rx_fifo_source_payload_data = my_uart_rx_fifo_fifo_out_payload_data;
assign my_uart_rx_fifo_re = my_uart_rx_fifo_source_ready;
assign my_uart_rx_fifo_syncfifo_re = (my_uart_rx_fifo_syncfifo_readable & ((~my_uart_rx_fifo_readable) | my_uart_rx_fifo_re));
assign my_uart_rx_fifo_level1 = (my_uart_rx_fifo_level0 + my_uart_rx_fifo_readable);
always @(*) begin
    my_uart_rx_fifo_wrport_adr <= 4'd0;
    if (my_uart_rx_fifo_replace) begin
        my_uart_rx_fifo_wrport_adr <= (my_uart_rx_fifo_produce - 1'd1);
    end else begin
        my_uart_rx_fifo_wrport_adr <= my_uart_rx_fifo_produce;
    end
end
assign my_uart_rx_fifo_wrport_dat_w = my_uart_rx_fifo_syncfifo_din;
assign my_uart_rx_fifo_wrport_we = (my_uart_rx_fifo_syncfifo_we & (my_uart_rx_fifo_syncfifo_writable | my_uart_rx_fifo_replace));
assign my_uart_rx_fifo_do_read = (my_uart_rx_fifo_syncfifo_readable & my_uart_rx_fifo_syncfifo_re);
assign my_uart_rx_fifo_rdport_adr = my_uart_rx_fifo_consume;
assign my_uart_rx_fifo_syncfifo_dout = my_uart_rx_fifo_rdport_dat_r;
assign my_uart_rx_fifo_rdport_re = my_uart_rx_fifo_do_read;
assign my_uart_rx_fifo_syncfifo_writable = (my_uart_rx_fifo_level0 != 5'd16);
assign my_uart_rx_fifo_syncfifo_readable = (my_uart_rx_fifo_level0 != 1'd0);
assign leds_wait = (~leds_done);
always @(*) begin
    leds_leds <= 16'd0;
    if ((leds_mode == 1'd1)) begin
        leds_leds <= leds_storage;
    end else begin
        leds_leds <= leds_chaser;
    end
end
assign {user_led15, user_led14, user_led13, user_led12, user_led11, user_led10, user_led9, user_led8, user_led7, user_led6, user_led5, user_led4, user_led3, user_led2, user_led1, user_led0} = (leds_leds ^ 1'd0);
assign leds_done = (leds_count == 1'd0);
assign {segled_7, segled_6, segled_5, segled_4, segled_3, segled_2, segled_1, segled_0} = seg_abcdefg;
assign seg_cs0 = seg_cs1;
assign {segled_an7, segled_an6, segled_an5, segled_an4, segled_an3, segled_an2, segled_an1, segled_an0} = seg_cs0;
always @(*) begin
    seg_value <= 4'd0;
    case (seg_cs1)
        7'd127: begin
            seg_value <= seg_out7_storage;
        end
        8'd191: begin
            seg_value <= seg_out6_storage;
        end
        8'd223: begin
            seg_value <= seg_out5_storage;
        end
        8'd239: begin
            seg_value <= seg_out4_storage;
        end
        8'd247: begin
            seg_value <= seg_out3_storage;
        end
        8'd251: begin
            seg_value <= seg_out2_storage;
        end
        8'd253: begin
            seg_value <= seg_out1_storage;
        end
        8'd254: begin
            seg_value <= seg_out0_storage;
        end
    endcase
end
always @(*) begin
    seg_abcdefg <= 8'd0;
    case (seg_value)
        1'd0: begin
            seg_abcdefg <= 8'd192;
        end
        1'd1: begin
            seg_abcdefg <= 8'd249;
        end
        2'd2: begin
            seg_abcdefg <= 8'd164;
        end
        2'd3: begin
            seg_abcdefg <= 8'd176;
        end
        3'd4: begin
            seg_abcdefg <= 8'd153;
        end
        3'd5: begin
            seg_abcdefg <= 8'd146;
        end
        3'd6: begin
            seg_abcdefg <= 8'd130;
        end
        3'd7: begin
            seg_abcdefg <= 8'd248;
        end
        4'd8: begin
            seg_abcdefg <= 8'd128;
        end
        4'd9: begin
            seg_abcdefg <= 8'd144;
        end
        4'd10: begin
            seg_abcdefg <= 8'd136;
        end
        4'd11: begin
            seg_abcdefg <= 8'd131;
        end
        4'd12: begin
            seg_abcdefg <= 8'd198;
        end
        4'd13: begin
            seg_abcdefg <= 8'd161;
        end
        4'd14: begin
            seg_abcdefg <= 8'd134;
        end
        4'd15: begin
            seg_abcdefg <= 8'd142;
        end
    endcase
end
assign seg_ce = (seg_counter == 1'd0);
assign state_low_status = slice_proxy0[7:0];
assign state_high_status = slice_proxy1[15:8];
always @(*) begin
    button_trigger <= 1'd0;
    if (button_mode_storage) begin
        button_trigger <= (in_status ^ button_in_pads_n_d);
    end else begin
        button_trigger <= (in_status ^ button_edge_storage);
    end
end
assign button_i00 = button_status;
assign button_i01 = button_pending;
always @(*) begin
    button_clear <= 1'd0;
    if ((button_pending_re & button_pending_r)) begin
        button_clear <= 1'd1;
    end
end
assign button_irq = (button_pending_status & button_enable_storage);
assign button_status = button_trigger;
always @(*) begin
    interface0_ack <= 1'd0;
    interface0_dat_r <= 32'd0;
    interface1_adr <= 14'd0;
    interface1_dat_w <= 32'd0;
    interface1_we <= 1'd0;
    wishbone2csr_next_state <= 1'd0;
    wishbone2csr_next_state <= wishbone2csr_state;
    case (wishbone2csr_state)
        1'd1: begin
            interface0_ack <= 1'd1;
            interface0_dat_r <= interface1_dat_r;
            wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            interface1_dat_w <= interface0_dat_w;
            if ((interface0_cyc & interface0_stb)) begin
                interface1_adr <= interface0_adr[29:0];
                interface1_we <= (interface0_we & (interface0_sel != 1'd0));
                wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank0_in_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank0_in_re <= 1'd0;
    csr_bankarray_csrbank0_in_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_in_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_in_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_mode0_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank0_mode0_re <= 1'd0;
    csr_bankarray_csrbank0_mode0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_mode0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_mode0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_edge0_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank0_edge0_re <= 1'd0;
    csr_bankarray_csrbank0_edge0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_edge0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_edge0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_ev_status_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank0_ev_status_re <= 1'd0;
    csr_bankarray_csrbank0_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank0_ev_status_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_ev_status_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_ev_pending_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank0_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank0_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank0_ev_pending_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_ev_pending_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_ev_enable0_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank0_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank0_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank0_ev_enable0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_ev_enable0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_in_w = in_status;
assign in_we = csr_bankarray_csrbank0_in_we;
assign csr_bankarray_csrbank0_mode0_w = button_mode_storage;
assign csr_bankarray_csrbank0_edge0_w = button_edge_storage;
always @(*) begin
    button_status_status <= 1'd0;
    button_status_status <= button_i00;
end
assign csr_bankarray_csrbank0_ev_status_w = button_status_status;
assign button_status_we = csr_bankarray_csrbank0_ev_status_we;
always @(*) begin
    button_pending_status <= 1'd0;
    button_pending_status <= button_i01;
end
assign csr_bankarray_csrbank0_ev_pending_w = button_pending_status;
assign button_pending_we = csr_bankarray_csrbank0_ev_pending_we;
assign button_i02 = button_enable_storage;
assign csr_bankarray_csrbank0_ev_enable0_w = button_enable_storage;
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 1'd1);
assign csr_bankarray_csrbank1_reset0_r = csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank1_reset0_re <= 1'd0;
    csr_bankarray_csrbank1_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_reset0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_reset0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_scratch0_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank1_scratch0_re <= 1'd0;
    csr_bankarray_csrbank1_scratch0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank1_scratch0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_scratch0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_bus_errors_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank1_bus_errors_re <= 1'd0;
    csr_bankarray_csrbank1_bus_errors_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank1_bus_errors_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_bus_errors_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
always @(*) begin
    basesoc_soc_rst <= 1'd0;
    if (basesoc_reset_re) begin
        basesoc_soc_rst <= basesoc_reset_storage[0];
    end
end
assign basesoc_cpu_rst = basesoc_reset_storage[1];
assign csr_bankarray_csrbank1_reset0_w = basesoc_reset_storage[1:0];
assign csr_bankarray_csrbank1_scratch0_w = basesoc_scratch_storage[31:0];
assign csr_bankarray_csrbank1_bus_errors_w = basesoc_bus_errors_status[31:0];
assign basesoc_bus_errors_we = csr_bankarray_csrbank1_bus_errors_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 2'd2);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign csr_bankarray_csrbank2_out0_r = csr_bankarray_interface2_bank_bus_dat_w[15:0];
always @(*) begin
    csr_bankarray_csrbank2_out0_re <= 1'd0;
    csr_bankarray_csrbank2_out0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank2_out0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_out0_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank2_out0_w = leds_storage[15:0];
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign my_uart_rxtx_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    my_uart_rxtx_re <= 1'd0;
    my_uart_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        my_uart_rxtx_re <= csr_bankarray_interface3_bank_bus_we;
        my_uart_rxtx_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_txfull_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_txfull_re <= 1'd0;
    csr_bankarray_csrbank3_txfull_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank3_txfull_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_txfull_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_rxempty_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_rxempty_re <= 1'd0;
    csr_bankarray_csrbank3_rxempty_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank3_rxempty_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_rxempty_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_ev_status_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_ev_status_re <= 1'd0;
    csr_bankarray_csrbank3_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank3_ev_status_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_status_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_ev_pending_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank3_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank3_ev_pending_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_pending_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_ev_enable0_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank3_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank3_ev_enable0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_ev_enable0_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_txempty_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_txempty_re <= 1'd0;
    csr_bankarray_csrbank3_txempty_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank3_txempty_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_txempty_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_rxfull_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank3_rxfull_re <= 1'd0;
    csr_bankarray_csrbank3_rxfull_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank3_rxfull_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_rxfull_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_txfull_w = my_uart_txfull_status;
assign my_uart_txfull_we = csr_bankarray_csrbank3_txfull_we;
assign csr_bankarray_csrbank3_rxempty_w = my_uart_rxempty_status;
assign my_uart_rxempty_we = csr_bankarray_csrbank3_rxempty_we;
always @(*) begin
    my_uart_status_status <= 2'd0;
    my_uart_status_status[0] <= my_uart_tx0;
    my_uart_status_status[1] <= my_uart_rx0;
end
assign csr_bankarray_csrbank3_ev_status_w = my_uart_status_status[1:0];
assign my_uart_status_we = csr_bankarray_csrbank3_ev_status_we;
always @(*) begin
    my_uart_pending_status <= 2'd0;
    my_uart_pending_status[0] <= my_uart_tx1;
    my_uart_pending_status[1] <= my_uart_rx1;
end
assign csr_bankarray_csrbank3_ev_pending_w = my_uart_pending_status[1:0];
assign my_uart_pending_we = csr_bankarray_csrbank3_ev_pending_we;
assign my_uart_tx2 = my_uart_enable_storage[0];
assign my_uart_rx2 = my_uart_enable_storage[1];
assign csr_bankarray_csrbank3_ev_enable0_w = my_uart_enable_storage[1:0];
assign csr_bankarray_csrbank3_txempty_w = my_uart_txempty_status;
assign my_uart_txempty_we = csr_bankarray_csrbank3_txempty_we;
assign csr_bankarray_csrbank3_rxfull_w = my_uart_rxfull_status;
assign my_uart_rxfull_we = csr_bankarray_csrbank3_rxfull_we;
assign csr_bankarray_csrbank4_sel = (csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign csr_bankarray_csrbank4_out00_r = csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
    csr_bankarray_csrbank4_out00_re <= 1'd0;
    csr_bankarray_csrbank4_out00_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank4_out00_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_out00_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_out10_r = csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
    csr_bankarray_csrbank4_out10_re <= 1'd0;
    csr_bankarray_csrbank4_out10_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank4_out10_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_out10_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_out20_r = csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
    csr_bankarray_csrbank4_out20_re <= 1'd0;
    csr_bankarray_csrbank4_out20_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank4_out20_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_out20_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_out30_r = csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
    csr_bankarray_csrbank4_out30_re <= 1'd0;
    csr_bankarray_csrbank4_out30_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank4_out30_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_out30_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_out40_r = csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
    csr_bankarray_csrbank4_out40_re <= 1'd0;
    csr_bankarray_csrbank4_out40_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank4_out40_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_out40_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_out50_r = csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
    csr_bankarray_csrbank4_out50_re <= 1'd0;
    csr_bankarray_csrbank4_out50_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank4_out50_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_out50_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_out60_r = csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
    csr_bankarray_csrbank4_out60_re <= 1'd0;
    csr_bankarray_csrbank4_out60_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank4_out60_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_out60_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_out70_r = csr_bankarray_interface4_bank_bus_dat_w[3:0];
always @(*) begin
    csr_bankarray_csrbank4_out70_re <= 1'd0;
    csr_bankarray_csrbank4_out70_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank4_out70_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_out70_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_out00_w = seg_out0_storage[3:0];
assign csr_bankarray_csrbank4_out10_w = seg_out1_storage[3:0];
assign csr_bankarray_csrbank4_out20_w = seg_out2_storage[3:0];
assign csr_bankarray_csrbank4_out30_w = seg_out3_storage[3:0];
assign csr_bankarray_csrbank4_out40_w = seg_out4_storage[3:0];
assign csr_bankarray_csrbank4_out50_w = seg_out5_storage[3:0];
assign csr_bankarray_csrbank4_out60_w = seg_out6_storage[3:0];
assign csr_bankarray_csrbank4_out70_w = seg_out7_storage[3:0];
assign csr_bankarray_csrbank5_sel = (csr_bankarray_interface5_bank_bus_adr[13:9] == 3'd6);
assign csr_bankarray_csrbank5_state_low_r = csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank5_state_low_re <= 1'd0;
    csr_bankarray_csrbank5_state_low_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank5_state_low_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_state_low_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
assign csr_bankarray_csrbank5_state_high_r = csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank5_state_high_re <= 1'd0;
    csr_bankarray_csrbank5_state_high_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank5_state_high_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_state_high_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
assign csr_bankarray_csrbank5_state_low_w = state_low_status[7:0];
assign state_low_we = csr_bankarray_csrbank5_state_low_we;
assign csr_bankarray_csrbank5_state_high_w = state_high_status[7:0];
assign state_high_we = csr_bankarray_csrbank5_state_high_we;
assign csr_bankarray_csrbank6_sel = (csr_bankarray_interface6_bank_bus_adr[13:9] == 3'd7);
assign csr_bankarray_csrbank6_load0_r = csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank6_load0_re <= 1'd0;
    csr_bankarray_csrbank6_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank6_load0_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_load0_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
assign csr_bankarray_csrbank6_reload0_r = csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank6_reload0_re <= 1'd0;
    csr_bankarray_csrbank6_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank6_reload0_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_reload0_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
assign csr_bankarray_csrbank6_en0_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank6_en0_re <= 1'd0;
    csr_bankarray_csrbank6_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank6_en0_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_en0_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
assign csr_bankarray_csrbank6_update_value0_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank6_update_value0_re <= 1'd0;
    csr_bankarray_csrbank6_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank6_update_value0_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_update_value0_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
assign csr_bankarray_csrbank6_value_r = csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank6_value_re <= 1'd0;
    csr_bankarray_csrbank6_value_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank6_value_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_value_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
assign csr_bankarray_csrbank6_ev_status_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank6_ev_status_re <= 1'd0;
    csr_bankarray_csrbank6_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank6_ev_status_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_ev_status_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
assign csr_bankarray_csrbank6_ev_pending_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank6_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank6_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank6_ev_pending_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_ev_pending_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
assign csr_bankarray_csrbank6_ev_enable0_r = csr_bankarray_interface6_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank6_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank6_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank6_ev_enable0_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_ev_enable0_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
assign csr_bankarray_csrbank6_load0_w = basesoc_load_storage[31:0];
assign csr_bankarray_csrbank6_reload0_w = basesoc_reload_storage[31:0];
assign csr_bankarray_csrbank6_en0_w = basesoc_en_storage;
assign csr_bankarray_csrbank6_update_value0_w = basesoc_update_value_storage;
assign csr_bankarray_csrbank6_value_w = basesoc_value_status[31:0];
assign basesoc_value_we = csr_bankarray_csrbank6_value_we;
always @(*) begin
    basesoc_status_status <= 1'd0;
    basesoc_status_status <= basesoc_zero0;
end
assign csr_bankarray_csrbank6_ev_status_w = basesoc_status_status;
assign basesoc_status_we = csr_bankarray_csrbank6_ev_status_we;
always @(*) begin
    basesoc_pending_status <= 1'd0;
    basesoc_pending_status <= basesoc_zero1;
end
assign csr_bankarray_csrbank6_ev_pending_w = basesoc_pending_status;
assign basesoc_pending_we = csr_bankarray_csrbank6_ev_pending_we;
assign basesoc_zero2 = basesoc_enable_storage;
assign csr_bankarray_csrbank6_ev_enable0_w = basesoc_enable_storage;
assign csr_interconnect_adr = interface1_adr;
assign csr_interconnect_we = interface1_we;
assign csr_interconnect_dat_w = interface1_dat_w;
assign interface1_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface4_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface5_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface6_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface4_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface5_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface6_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_interface4_bank_bus_dat_r) | csr_bankarray_interface5_bank_bus_dat_r) | csr_bankarray_interface6_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
assign slice_proxy0 = {user_sw15, user_sw14, user_sw13, user_sw12, user_sw11, user_sw10, user_sw9, user_sw8, user_sw7, user_sw6, user_sw5, user_sw4, user_sw3, user_sw2, user_sw1, user_sw0};
assign slice_proxy1 = {user_sw15, user_sw14, user_sw13, user_sw12, user_sw11, user_sw10, user_sw9, user_sw8, user_sw7, user_sw6, user_sw5, user_sw4, user_sw3, user_sw2, user_sw1, user_sw0};
always @(*) begin
    array_muxed0 <= 30'd0;
    case (grant)
        1'd0: begin
            array_muxed0 <= basesoc_cpu_ibus_ibus_adr;
        end
        1'd1: begin
            array_muxed0 <= basesoc_cpu_dbus_dbus_adr;
        end
        default: begin
            array_muxed0 <= basesoc_basesoc_wishbone_adr;
        end
    endcase
end
always @(*) begin
    array_muxed1 <= 32'd0;
    case (grant)
        1'd0: begin
            array_muxed1 <= basesoc_cpu_ibus_ibus_dat_w;
        end
        1'd1: begin
            array_muxed1 <= basesoc_cpu_dbus_dbus_dat_w;
        end
        default: begin
            array_muxed1 <= basesoc_basesoc_wishbone_dat_w;
        end
    endcase
end
always @(*) begin
    array_muxed2 <= 4'd0;
    case (grant)
        1'd0: begin
            array_muxed2 <= basesoc_cpu_ibus_ibus_sel;
        end
        1'd1: begin
            array_muxed2 <= basesoc_cpu_dbus_dbus_sel;
        end
        default: begin
            array_muxed2 <= basesoc_basesoc_wishbone_sel;
        end
    endcase
end
always @(*) begin
    array_muxed3 <= 1'd0;
    case (grant)
        1'd0: begin
            array_muxed3 <= basesoc_cpu_ibus_ibus_cyc;
        end
        1'd1: begin
            array_muxed3 <= basesoc_cpu_dbus_dbus_cyc;
        end
        default: begin
            array_muxed3 <= basesoc_basesoc_wishbone_cyc;
        end
    endcase
end
always @(*) begin
    array_muxed4 <= 1'd0;
    case (grant)
        1'd0: begin
            array_muxed4 <= basesoc_cpu_ibus_ibus_stb;
        end
        1'd1: begin
            array_muxed4 <= basesoc_cpu_dbus_dbus_stb;
        end
        default: begin
            array_muxed4 <= basesoc_basesoc_wishbone_stb;
        end
    endcase
end
always @(*) begin
    array_muxed5 <= 1'd0;
    case (grant)
        1'd0: begin
            array_muxed5 <= basesoc_cpu_ibus_ibus_we;
        end
        1'd1: begin
            array_muxed5 <= basesoc_cpu_dbus_dbus_we;
        end
        default: begin
            array_muxed5 <= basesoc_basesoc_wishbone_we;
        end
    endcase
end
always @(*) begin
    array_muxed6 <= 3'd0;
    case (grant)
        1'd0: begin
            array_muxed6 <= basesoc_cpu_ibus_ibus_cti;
        end
        1'd1: begin
            array_muxed6 <= basesoc_cpu_dbus_dbus_cti;
        end
        default: begin
            array_muxed6 <= basesoc_basesoc_wishbone_cti;
        end
    endcase
end
always @(*) begin
    array_muxed7 <= 2'd0;
    case (grant)
        1'd0: begin
            array_muxed7 <= basesoc_cpu_ibus_ibus_bte;
        end
        1'd1: begin
            array_muxed7 <= basesoc_cpu_dbus_dbus_bte;
        end
        default: begin
            array_muxed7 <= basesoc_basesoc_wishbone_bte;
        end
    endcase
end
assign xilinxasyncresetsynchronizerimpl0 = (~crg_locked);
assign xilinxasyncresetsynchronizerimpl1 = (~crg_locked);
assign xilinxasyncresetsynchronizerimpl2 = (~crg_locked);
assign xilinxasyncresetsynchronizerimpl3 = (~crg_locked);
assign xilinxasyncresetsynchronizerimpl4 = (~crg_locked);
assign xilinxasyncresetsynchronizerimpl5 = (~crg_locked);
assign basesoc_basesoc_rx_rx = xilinxmultiregimpl0_regs1;
assign rx_rx = xilinxmultiregimpl1_regs1;
assign in_status = xilinxmultiregimpl2_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge idelay_clk) begin
    if ((crg_reset_counter != 1'd0)) begin
        crg_reset_counter <= (crg_reset_counter - 1'd1);
    end else begin
        crg_ic_reset <= 1'd0;
    end
    if (idelay_rst) begin
        crg_reset_counter <= 4'd15;
        crg_ic_reset <= 1'd1;
    end
end

always @(posedge sys_clk) begin
    if ((((addCellularRAM_bus_stb & addCellularRAM_bus_cyc) & addCellularRAM_bus_ack) | socbushandler_skip)) begin
        socbushandler_count <= (socbushandler_count + 1'd1);
    end
    if ((socbushandler_adapted_interface_ack | (~socbushandler_adapted_interface_cyc))) begin
        socbushandler_count <= 1'd0;
    end
    if ((addCellularRAM_bus_ack | socbushandler_skip)) begin
        socbushandler_dat_r <= socbushandler_adapted_interface_dat_r;
    end
    case (grant)
        1'd0: begin
            if ((~request[0])) begin
                if (request[1]) begin
                    grant <= 1'd1;
                end else begin
                    if (request[2]) begin
                        grant <= 2'd2;
                    end
                end
            end
        end
        1'd1: begin
            if ((~request[1])) begin
                if (request[2]) begin
                    grant <= 2'd2;
                end else begin
                    if (request[0]) begin
                        grant <= 1'd0;
                    end
                end
            end
        end
        2'd2: begin
            if ((~request[2])) begin
                if (request[0]) begin
                    grant <= 1'd0;
                end else begin
                    if (request[1]) begin
                        grant <= 1'd1;
                    end
                end
            end
        end
    endcase
    slave_sel_r <= slave_sel;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if ((basesoc_bus_errors != 32'd4294967295)) begin
        if (basesoc_bus_error) begin
            basesoc_bus_errors <= (basesoc_bus_errors + 1'd1);
        end
    end
    basesoc_cpu_vexriscv_debug_bus_dat_r <= basesoc_cpu_vexriscv_o_rsp_data;
    basesoc_cpu_vexriscv_debug_reset <= basesoc_cpu_vexriscv_reset_debug_logic;
    if (((((basesoc_cpu_vexriscv_debug_bus_stb & basesoc_cpu_vexriscv_debug_bus_cyc) & (~basesoc_cpu_vexriscv_transfer_in_progress)) & (~basesoc_cpu_vexriscv_transfer_complete)) & (~basesoc_cpu_vexriscv_transfer_wait_for_ack))) begin
        basesoc_cpu_vexriscv_i_cmd_payload_data <= basesoc_cpu_vexriscv_debug_bus_dat_w;
        basesoc_cpu_vexriscv_i_cmd_payload_address <= ((basesoc_cpu_vexriscv_debug_bus_adr[5:0] <<< 2'd2) | 1'd0);
        basesoc_cpu_vexriscv_i_cmd_payload_wr <= basesoc_cpu_vexriscv_debug_bus_we;
        basesoc_cpu_vexriscv_i_cmd_valid <= 1'd1;
        basesoc_cpu_vexriscv_transfer_in_progress <= 1'd1;
        basesoc_cpu_vexriscv_transfer_complete <= 1'd0;
        basesoc_cpu_vexriscv_debug_bus_ack <= 1'd0;
    end else begin
        if (basesoc_cpu_vexriscv_transfer_in_progress) begin
            if (basesoc_cpu_vexriscv_o_cmd_ready) begin
                basesoc_cpu_vexriscv_i_cmd_valid <= 1'd0;
                basesoc_cpu_vexriscv_i_cmd_payload_wr <= 1'd0;
                basesoc_cpu_vexriscv_transfer_complete <= 1'd1;
                basesoc_cpu_vexriscv_transfer_in_progress <= 1'd0;
            end
        end else begin
            if (basesoc_cpu_vexriscv_transfer_complete) begin
                basesoc_cpu_vexriscv_transfer_complete <= 1'd0;
                basesoc_cpu_vexriscv_debug_bus_ack <= 1'd1;
                basesoc_cpu_vexriscv_transfer_wait_for_ack <= 1'd1;
            end else begin
                if ((basesoc_cpu_vexriscv_transfer_wait_for_ack & (~(basesoc_cpu_vexriscv_debug_bus_stb & basesoc_cpu_vexriscv_debug_bus_cyc)))) begin
                    basesoc_cpu_vexriscv_transfer_wait_for_ack <= 1'd0;
                    basesoc_cpu_vexriscv_debug_bus_ack <= 1'd0;
                end
            end
        end
    end
    if (basesoc_cpu_vexriscv_o_resetOut) begin
        if ((basesoc_cpu_ibus_ibus_cyc & basesoc_cpu_ibus_ibus_stb)) begin
            basesoc_cpu_vexriscv_ibus_err <= 1'd1;
        end else begin
            basesoc_cpu_vexriscv_ibus_err <= 1'd0;
        end
        if ((basesoc_cpu_dbus_dbus_cyc & basesoc_cpu_dbus_dbus_stb)) begin
            basesoc_cpu_vexriscv_dbus_err <= 1'd1;
        end else begin
            basesoc_cpu_vexriscv_dbus_err <= 1'd0;
        end
        basesoc_cpu_vexriscv_reset_debug_logic <= 1'd1;
    end else begin
        basesoc_cpu_vexriscv_reset_debug_logic <= 1'd0;
    end
    basesoc_basesoc_ram_bus_ack <= 1'd0;
    if (((basesoc_basesoc_ram_bus_cyc & basesoc_basesoc_ram_bus_stb) & ((~basesoc_basesoc_ram_bus_ack) | basesoc_basesoc_adr_burst))) begin
        basesoc_basesoc_ram_bus_ack <= 1'd1;
    end
    basesoc_ram_bus_ram_bus_ack <= 1'd0;
    if (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & ((~basesoc_ram_bus_ram_bus_ack) | basesoc_ram_adr_burst))) begin
        basesoc_ram_bus_ram_bus_ack <= 1'd1;
    end
    {basesoc_basesoc_tx_tick, basesoc_basesoc_tx_phase} <= 23'd6597069;
    if (basesoc_basesoc_tx_enable) begin
        {basesoc_basesoc_tx_tick, basesoc_basesoc_tx_phase} <= (basesoc_basesoc_tx_phase + 23'd6597069);
    end
    rs232phytx0_state <= rs232phytx0_next_state;
    if (basesoc_basesoc_tx_count_rs232phytx0_next_value_ce0) begin
        basesoc_basesoc_tx_count <= basesoc_basesoc_tx_count_rs232phytx0_next_value0;
    end
    if (basesoc_basesoc_serial_tx_rs232phytx0_next_value_ce1) begin
        serial_tx <= basesoc_basesoc_serial_tx_rs232phytx0_next_value1;
    end
    if (basesoc_basesoc_tx_data_rs232phytx0_next_value_ce2) begin
        basesoc_basesoc_tx_data <= basesoc_basesoc_tx_data_rs232phytx0_next_value2;
    end
    basesoc_basesoc_rx_rx_d <= basesoc_basesoc_rx_rx;
    {basesoc_basesoc_rx_tick, basesoc_basesoc_rx_phase} <= 32'd2147483648;
    if (basesoc_basesoc_rx_enable) begin
        {basesoc_basesoc_rx_tick, basesoc_basesoc_rx_phase} <= (basesoc_basesoc_rx_phase + 23'd6597069);
    end
    rs232phyrx0_state <= rs232phyrx0_next_state;
    if (basesoc_basesoc_rx_count_rs232phyrx0_next_value_ce0) begin
        basesoc_basesoc_rx_count <= basesoc_basesoc_rx_count_rs232phyrx0_next_value0;
    end
    if (basesoc_basesoc_rx_data_rs232phyrx0_next_value_ce1) begin
        basesoc_basesoc_rx_data <= basesoc_basesoc_rx_data_rs232phyrx0_next_value1;
    end
    uartbone_state <= uartbone_next_state;
    if (basesoc_basesoc_data_bytes_count_uartbone_next_value_ce0) begin
        basesoc_basesoc_data_bytes_count <= basesoc_basesoc_data_bytes_count_uartbone_next_value0;
    end
    if (basesoc_basesoc_addr_bytes_count_uartbone_next_value_ce1) begin
        basesoc_basesoc_addr_bytes_count <= basesoc_basesoc_addr_bytes_count_uartbone_next_value1;
    end
    if (basesoc_basesoc_words_count_uartbone_next_value_ce2) begin
        basesoc_basesoc_words_count <= basesoc_basesoc_words_count_uartbone_next_value2;
    end
    if (basesoc_basesoc_cmd_uartbone_next_value_ce3) begin
        basesoc_basesoc_cmd <= basesoc_basesoc_cmd_uartbone_next_value3;
    end
    if (basesoc_basesoc_length_uartbone_next_value_ce4) begin
        basesoc_basesoc_length <= basesoc_basesoc_length_uartbone_next_value4;
    end
    if (basesoc_basesoc_address_uartbone_next_value_ce5) begin
        basesoc_basesoc_address <= basesoc_basesoc_address_uartbone_next_value5;
    end
    if (basesoc_basesoc_incr_uartbone_next_value_ce6) begin
        basesoc_basesoc_incr <= basesoc_basesoc_incr_uartbone_next_value6;
    end
    if (basesoc_basesoc_data_uartbone_next_value_ce7) begin
        basesoc_basesoc_data <= basesoc_basesoc_data_uartbone_next_value7;
    end
    if (basesoc_basesoc_reset) begin
        basesoc_basesoc_incr <= 1'd0;
        uartbone_state <= 3'd0;
    end
    if (basesoc_basesoc_wait) begin
        if ((~basesoc_basesoc_done)) begin
            basesoc_basesoc_count <= (basesoc_basesoc_count - 1'd1);
        end
    end else begin
        basesoc_basesoc_count <= 23'd7500000;
    end
    if (basesoc_en_storage) begin
        if ((basesoc_value == 1'd0)) begin
            basesoc_value <= basesoc_reload_storage;
        end else begin
            basesoc_value <= (basesoc_value - 1'd1);
        end
    end else begin
        basesoc_value <= basesoc_load_storage;
    end
    if (basesoc_update_value_re) begin
        basesoc_value_status <= basesoc_value;
    end
    if (basesoc_zero_clear) begin
        basesoc_zero_pending <= 1'd0;
    end
    basesoc_zero_trigger_d <= basesoc_zero_trigger;
    if ((basesoc_zero_trigger & (~basesoc_zero_trigger_d))) begin
        basesoc_zero_pending <= 1'd1;
    end
    addCellularRAM_reset <= sys_rst;
    cellularram_state <= cellularram_next_state;
    if (addCellularRAM_delaycounter_cellularram_next_value_ce0) begin
        addCellularRAM_delaycounter <= addCellularRAM_delaycounter_cellularram_next_value0;
    end
    if (addCellularRAM_bus_ack_cellularram_next_value_ce1) begin
        addCellularRAM_bus_ack <= addCellularRAM_bus_ack_cellularram_next_value1;
    end
    if (addCellularRAM_cellularram_cen_cellularram_next_value_ce2) begin
        cellularram_cen <= addCellularRAM_cellularram_cen_cellularram_next_value2;
    end
    if (addCellularRAM_cellularram_adv_cellularram_next_value_ce3) begin
        cellularram_adv <= addCellularRAM_cellularram_adv_cellularram_next_value3;
    end
    if (addCellularRAM_cellularram_lb_cellularram_next_value_ce4) begin
        cellularram_lb <= addCellularRAM_cellularram_lb_cellularram_next_value4;
    end
    if (addCellularRAM_cellularram_ub_cellularram_next_value_ce5) begin
        cellularram_ub <= addCellularRAM_cellularram_ub_cellularram_next_value5;
    end
    if (addCellularRAM_cellularram_clk_cellularram_next_value_ce6) begin
        cellularram_clk <= addCellularRAM_cellularram_clk_cellularram_next_value6;
    end
    if (addCellularRAM_cellularram_cre_cellularram_next_value_ce7) begin
        cellularram_cre <= addCellularRAM_cellularram_cre_cellularram_next_value7;
    end
    if (addCellularRAM_oe_cellularram_next_value_ce8) begin
        addCellularRAM_oe <= addCellularRAM_oe_cellularram_next_value8;
    end
    if (addCellularRAM_cellularram_addr_cellularram_next_value_ce9) begin
        cellularram_addr <= addCellularRAM_cellularram_addr_cellularram_next_value9;
    end
    if (addCellularRAM_cellularram_wen_cellularram_next_value_ce10) begin
        cellularram_wen <= addCellularRAM_cellularram_wen_cellularram_next_value10;
    end
    if (addCellularRAM_cellularram_oen_cellularram_next_value_ce11) begin
        cellularram_oen <= addCellularRAM_cellularram_oen_cellularram_next_value11;
    end
    if (addCellularRAM_o_cellularram_next_value_ce12) begin
        addCellularRAM_o <= addCellularRAM_o_cellularram_next_value12;
    end
    if (addCellularRAM_bus_dat_r_cellularram_next_value_ce13) begin
        addCellularRAM_bus_dat_r <= addCellularRAM_bus_dat_r_cellularram_next_value13;
    end
    if (addCellularRAM_reset) begin
        addCellularRAM_bus_ack <= 1'd0;
        addCellularRAM_delaycounter <= 5'd0;
        cellularram_addr <= 23'd0;
        cellularram_oen <= 1'd0;
        cellularram_wen <= 1'd0;
        cellularram_clk <= 1'd0;
        cellularram_adv <= 1'd0;
        cellularram_cen <= 1'd0;
        cellularram_ub <= 1'd0;
        cellularram_lb <= 1'd0;
        cellularram_cre <= 1'd0;
        addCellularRAM_o <= 16'd0;
        addCellularRAM_oe <= 1'd0;
        cellularram_state <= 3'd0;
    end
    {tx_tick, tx_phase} <= 23'd6597069;
    if (tx_enable) begin
        {tx_tick, tx_phase} <= (tx_phase + 23'd6597069);
    end
    rs232phytx1_state <= rs232phytx1_next_state;
    if (tx_count_rs232phytx1_next_value_ce0) begin
        tx_count <= tx_count_rs232phytx1_next_value0;
    end
    if (my_uart_pads_tx_rs232phytx1_next_value_ce1) begin
        my_uart_pads_tx <= my_uart_pads_tx_rs232phytx1_next_value1;
    end
    if (tx_data_rs232phytx1_next_value_ce2) begin
        tx_data <= tx_data_rs232phytx1_next_value2;
    end
    rx_rx_d <= rx_rx;
    {rx_tick, rx_phase} <= 32'd2147483648;
    if (rx_enable) begin
        {rx_tick, rx_phase} <= (rx_phase + 23'd6597069);
    end
    rs232phyrx1_state <= rs232phyrx1_next_state;
    if (rx_count_rs232phyrx1_next_value_ce0) begin
        rx_count <= rx_count_rs232phyrx1_next_value0;
    end
    if (rx_data_rs232phyrx1_next_value_ce1) begin
        rx_data <= rx_data_rs232phyrx1_next_value1;
    end
    if (my_uart_tx_clear) begin
        my_uart_tx_pending <= 1'd0;
    end
    my_uart_tx_trigger_d <= my_uart_tx_trigger;
    if ((my_uart_tx_trigger & (~my_uart_tx_trigger_d))) begin
        my_uart_tx_pending <= 1'd1;
    end
    if (my_uart_rx_clear) begin
        my_uart_rx_pending <= 1'd0;
    end
    my_uart_rx_trigger_d <= my_uart_rx_trigger;
    if ((my_uart_rx_trigger & (~my_uart_rx_trigger_d))) begin
        my_uart_rx_pending <= 1'd1;
    end
    if (my_uart_tx_fifo_syncfifo_re) begin
        my_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (my_uart_tx_fifo_re) begin
            my_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((my_uart_tx_fifo_syncfifo_we & my_uart_tx_fifo_syncfifo_writable) & (~my_uart_tx_fifo_replace))) begin
        my_uart_tx_fifo_produce <= (my_uart_tx_fifo_produce + 1'd1);
    end
    if (my_uart_tx_fifo_do_read) begin
        my_uart_tx_fifo_consume <= (my_uart_tx_fifo_consume + 1'd1);
    end
    if (((my_uart_tx_fifo_syncfifo_we & my_uart_tx_fifo_syncfifo_writable) & (~my_uart_tx_fifo_replace))) begin
        if ((~my_uart_tx_fifo_do_read)) begin
            my_uart_tx_fifo_level0 <= (my_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (my_uart_tx_fifo_do_read) begin
            my_uart_tx_fifo_level0 <= (my_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (my_uart_rx_fifo_syncfifo_re) begin
        my_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (my_uart_rx_fifo_re) begin
            my_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((my_uart_rx_fifo_syncfifo_we & my_uart_rx_fifo_syncfifo_writable) & (~my_uart_rx_fifo_replace))) begin
        my_uart_rx_fifo_produce <= (my_uart_rx_fifo_produce + 1'd1);
    end
    if (my_uart_rx_fifo_do_read) begin
        my_uart_rx_fifo_consume <= (my_uart_rx_fifo_consume + 1'd1);
    end
    if (((my_uart_rx_fifo_syncfifo_we & my_uart_rx_fifo_syncfifo_writable) & (~my_uart_rx_fifo_replace))) begin
        if ((~my_uart_rx_fifo_do_read)) begin
            my_uart_rx_fifo_level0 <= (my_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (my_uart_rx_fifo_do_read) begin
            my_uart_rx_fifo_level0 <= (my_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (leds_done) begin
        leds_chaser <= {leds_chaser, (~leds_chaser[15])};
    end
    if (leds_re) begin
        leds_mode <= 1'd1;
    end
    if (leds_wait) begin
        if ((~leds_done)) begin
            leds_count <= (leds_count - 1'd1);
        end
    end else begin
        leds_count <= 22'd2343750;
    end
    if (seg_ce) begin
        seg_cs1[1] <= seg_cs1[0];
        seg_cs1[2] <= seg_cs1[1];
        seg_cs1[3] <= seg_cs1[2];
        seg_cs1[4] <= seg_cs1[3];
        seg_cs1[5] <= seg_cs1[4];
        seg_cs1[6] <= seg_cs1[5];
        seg_cs1[7] <= seg_cs1[6];
        seg_cs1[0] <= seg_cs1[7];
    end
    if (((~seg_enable) | seg_ce)) begin
        seg_counter <= 17'd74999;
    end else begin
        seg_counter <= (seg_counter - 1'd1);
    end
    button_in_pads_n_d <= in_status;
    if (button_clear) begin
        button_pending <= 1'd0;
    end
    button_trigger_d <= button_trigger;
    if ((button_trigger & (~button_trigger_d))) begin
        button_pending <= 1'd1;
    end
    wishbone2csr_state <= wishbone2csr_next_state;
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_in_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_mode0_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_edge0_w;
            end
            2'd3: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_ev_enable0_w;
            end
        endcase
    end
    in_re <= csr_bankarray_csrbank0_in_re;
    if (csr_bankarray_csrbank0_mode0_re) begin
        button_mode_storage <= csr_bankarray_csrbank0_mode0_r;
    end
    button_mode_re <= csr_bankarray_csrbank0_mode0_re;
    if (csr_bankarray_csrbank0_edge0_re) begin
        button_edge_storage <= csr_bankarray_csrbank0_edge0_r;
    end
    button_edge_re <= csr_bankarray_csrbank0_edge0_re;
    button_status_re <= csr_bankarray_csrbank0_ev_status_re;
    if (csr_bankarray_csrbank0_ev_pending_re) begin
        button_pending_r <= csr_bankarray_csrbank0_ev_pending_r;
    end
    button_pending_re <= csr_bankarray_csrbank0_ev_pending_re;
    if (csr_bankarray_csrbank0_ev_enable0_re) begin
        button_enable_storage <= csr_bankarray_csrbank0_ev_enable0_r;
    end
    button_enable_re <= csr_bankarray_csrbank0_ev_enable0_re;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_bus_errors_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank1_reset0_re) begin
        basesoc_reset_storage[1:0] <= csr_bankarray_csrbank1_reset0_r;
    end
    basesoc_reset_re <= csr_bankarray_csrbank1_reset0_re;
    if (csr_bankarray_csrbank1_scratch0_re) begin
        basesoc_scratch_storage[31:0] <= csr_bankarray_csrbank1_scratch0_r;
    end
    basesoc_scratch_re <= csr_bankarray_csrbank1_scratch0_re;
    basesoc_bus_errors_re <= csr_bankarray_csrbank1_bus_errors_re;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_out0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank2_out0_re) begin
        leds_storage[15:0] <= csr_bankarray_csrbank2_out0_r;
    end
    leds_re <= csr_bankarray_csrbank2_out0_re;
    csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank3_sel) begin
        case (csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface3_bank_bus_dat_r <= my_uart_rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_txempty_w;
            end
            3'd7: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_rxfull_w;
            end
        endcase
    end
    my_uart_txfull_re <= csr_bankarray_csrbank3_txfull_re;
    my_uart_rxempty_re <= csr_bankarray_csrbank3_rxempty_re;
    my_uart_status_re <= csr_bankarray_csrbank3_ev_status_re;
    if (csr_bankarray_csrbank3_ev_pending_re) begin
        my_uart_pending_r[1:0] <= csr_bankarray_csrbank3_ev_pending_r;
    end
    my_uart_pending_re <= csr_bankarray_csrbank3_ev_pending_re;
    if (csr_bankarray_csrbank3_ev_enable0_re) begin
        my_uart_enable_storage[1:0] <= csr_bankarray_csrbank3_ev_enable0_r;
    end
    my_uart_enable_re <= csr_bankarray_csrbank3_ev_enable0_re;
    my_uart_txempty_re <= csr_bankarray_csrbank3_txempty_re;
    my_uart_rxfull_re <= csr_bankarray_csrbank3_rxfull_re;
    csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank4_sel) begin
        case (csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_out00_w;
            end
            1'd1: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_out10_w;
            end
            2'd2: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_out20_w;
            end
            2'd3: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_out30_w;
            end
            3'd4: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_out40_w;
            end
            3'd5: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_out50_w;
            end
            3'd6: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_out60_w;
            end
            3'd7: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_out70_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank4_out00_re) begin
        seg_out0_storage[3:0] <= csr_bankarray_csrbank4_out00_r;
    end
    seg_out0_re <= csr_bankarray_csrbank4_out00_re;
    if (csr_bankarray_csrbank4_out10_re) begin
        seg_out1_storage[3:0] <= csr_bankarray_csrbank4_out10_r;
    end
    seg_out1_re <= csr_bankarray_csrbank4_out10_re;
    if (csr_bankarray_csrbank4_out20_re) begin
        seg_out2_storage[3:0] <= csr_bankarray_csrbank4_out20_r;
    end
    seg_out2_re <= csr_bankarray_csrbank4_out20_re;
    if (csr_bankarray_csrbank4_out30_re) begin
        seg_out3_storage[3:0] <= csr_bankarray_csrbank4_out30_r;
    end
    seg_out3_re <= csr_bankarray_csrbank4_out30_re;
    if (csr_bankarray_csrbank4_out40_re) begin
        seg_out4_storage[3:0] <= csr_bankarray_csrbank4_out40_r;
    end
    seg_out4_re <= csr_bankarray_csrbank4_out40_re;
    if (csr_bankarray_csrbank4_out50_re) begin
        seg_out5_storage[3:0] <= csr_bankarray_csrbank4_out50_r;
    end
    seg_out5_re <= csr_bankarray_csrbank4_out50_re;
    if (csr_bankarray_csrbank4_out60_re) begin
        seg_out6_storage[3:0] <= csr_bankarray_csrbank4_out60_r;
    end
    seg_out6_re <= csr_bankarray_csrbank4_out60_re;
    if (csr_bankarray_csrbank4_out70_re) begin
        seg_out7_storage[3:0] <= csr_bankarray_csrbank4_out70_r;
    end
    seg_out7_re <= csr_bankarray_csrbank4_out70_re;
    csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank5_sel) begin
        case (csr_bankarray_interface5_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_state_low_w;
            end
            1'd1: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_state_high_w;
            end
        endcase
    end
    state_low_re <= csr_bankarray_csrbank5_state_low_re;
    state_high_re <= csr_bankarray_csrbank5_state_high_re;
    csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank6_sel) begin
        case (csr_bankarray_interface6_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_value_w;
            end
            3'd5: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank6_load0_re) begin
        basesoc_load_storage[31:0] <= csr_bankarray_csrbank6_load0_r;
    end
    basesoc_load_re <= csr_bankarray_csrbank6_load0_re;
    if (csr_bankarray_csrbank6_reload0_re) begin
        basesoc_reload_storage[31:0] <= csr_bankarray_csrbank6_reload0_r;
    end
    basesoc_reload_re <= csr_bankarray_csrbank6_reload0_re;
    if (csr_bankarray_csrbank6_en0_re) begin
        basesoc_en_storage <= csr_bankarray_csrbank6_en0_r;
    end
    basesoc_en_re <= csr_bankarray_csrbank6_en0_re;
    if (csr_bankarray_csrbank6_update_value0_re) begin
        basesoc_update_value_storage <= csr_bankarray_csrbank6_update_value0_r;
    end
    basesoc_update_value_re <= csr_bankarray_csrbank6_update_value0_re;
    basesoc_value_re <= csr_bankarray_csrbank6_value_re;
    basesoc_status_re <= csr_bankarray_csrbank6_ev_status_re;
    if (csr_bankarray_csrbank6_ev_pending_re) begin
        basesoc_pending_r <= csr_bankarray_csrbank6_ev_pending_r;
    end
    basesoc_pending_re <= csr_bankarray_csrbank6_ev_pending_re;
    if (csr_bankarray_csrbank6_ev_enable0_re) begin
        basesoc_enable_storage <= csr_bankarray_csrbank6_ev_enable0_r;
    end
    basesoc_enable_re <= csr_bankarray_csrbank6_ev_enable0_re;
    if (sys_rst) begin
        basesoc_reset_storage <= 2'd0;
        basesoc_reset_re <= 1'd0;
        basesoc_scratch_storage <= 32'd305419896;
        basesoc_scratch_re <= 1'd0;
        basesoc_bus_errors_re <= 1'd0;
        basesoc_bus_errors <= 32'd0;
        basesoc_cpu_vexriscv_debug_reset <= 1'd0;
        basesoc_cpu_vexriscv_ibus_err <= 1'd0;
        basesoc_cpu_vexriscv_dbus_err <= 1'd0;
        basesoc_cpu_vexriscv_i_cmd_valid <= 1'd0;
        basesoc_cpu_vexriscv_i_cmd_payload_wr <= 1'd0;
        basesoc_cpu_vexriscv_i_cmd_payload_address <= 8'd0;
        basesoc_cpu_vexriscv_i_cmd_payload_data <= 32'd0;
        basesoc_cpu_vexriscv_reset_debug_logic <= 1'd0;
        basesoc_cpu_vexriscv_transfer_complete <= 1'd0;
        basesoc_cpu_vexriscv_transfer_in_progress <= 1'd0;
        basesoc_cpu_vexriscv_transfer_wait_for_ack <= 1'd0;
        basesoc_cpu_vexriscv_debug_bus_ack <= 1'd0;
        basesoc_basesoc_ram_bus_ack <= 1'd0;
        basesoc_ram_bus_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        basesoc_basesoc_tx_tick <= 1'd0;
        basesoc_basesoc_rx_tick <= 1'd0;
        basesoc_basesoc_rx_rx_d <= 1'd0;
        basesoc_basesoc_incr <= 1'd0;
        basesoc_basesoc_count <= 23'd7500000;
        basesoc_load_storage <= 32'd0;
        basesoc_load_re <= 1'd0;
        basesoc_reload_storage <= 32'd0;
        basesoc_reload_re <= 1'd0;
        basesoc_en_storage <= 1'd0;
        basesoc_en_re <= 1'd0;
        basesoc_update_value_storage <= 1'd0;
        basesoc_update_value_re <= 1'd0;
        basesoc_value_status <= 32'd0;
        basesoc_value_re <= 1'd0;
        basesoc_zero_pending <= 1'd0;
        basesoc_zero_trigger_d <= 1'd0;
        basesoc_status_re <= 1'd0;
        basesoc_pending_re <= 1'd0;
        basesoc_pending_r <= 1'd0;
        basesoc_enable_storage <= 1'd0;
        basesoc_enable_re <= 1'd0;
        basesoc_value <= 32'd0;
        addCellularRAM_bus_ack <= 1'd0;
        addCellularRAM_delaycounter <= 5'd0;
        cellularram_addr <= 23'd0;
        cellularram_oen <= 1'd0;
        cellularram_wen <= 1'd0;
        cellularram_clk <= 1'd0;
        cellularram_adv <= 1'd0;
        cellularram_cen <= 1'd0;
        cellularram_ub <= 1'd0;
        cellularram_lb <= 1'd0;
        cellularram_cre <= 1'd0;
        addCellularRAM_o <= 16'd0;
        addCellularRAM_oe <= 1'd0;
        addCellularRAM_reset <= 1'd0;
        socbushandler_count <= 1'd0;
        my_uart_pads_tx <= 1'd1;
        tx_tick <= 1'd0;
        rx_tick <= 1'd0;
        rx_rx_d <= 1'd0;
        my_uart_txfull_re <= 1'd0;
        my_uart_rxempty_re <= 1'd0;
        my_uart_tx_pending <= 1'd0;
        my_uart_tx_trigger_d <= 1'd0;
        my_uart_rx_pending <= 1'd0;
        my_uart_rx_trigger_d <= 1'd0;
        my_uart_status_re <= 1'd0;
        my_uart_pending_re <= 1'd0;
        my_uart_pending_r <= 2'd0;
        my_uart_enable_storage <= 2'd0;
        my_uart_enable_re <= 1'd0;
        my_uart_txempty_re <= 1'd0;
        my_uart_rxfull_re <= 1'd0;
        my_uart_tx_fifo_readable <= 1'd0;
        my_uart_tx_fifo_level0 <= 5'd0;
        my_uart_tx_fifo_produce <= 4'd0;
        my_uart_tx_fifo_consume <= 4'd0;
        my_uart_rx_fifo_readable <= 1'd0;
        my_uart_rx_fifo_level0 <= 5'd0;
        my_uart_rx_fifo_produce <= 4'd0;
        my_uart_rx_fifo_consume <= 4'd0;
        leds_storage <= 16'd0;
        leds_re <= 1'd0;
        leds_chaser <= 16'd0;
        leds_mode <= 1'd0;
        leds_count <= 22'd2343750;
        seg_out0_storage <= 4'd0;
        seg_out0_re <= 1'd0;
        seg_out1_storage <= 4'd0;
        seg_out1_re <= 1'd0;
        seg_out2_storage <= 4'd0;
        seg_out2_re <= 1'd0;
        seg_out3_storage <= 4'd0;
        seg_out3_re <= 1'd0;
        seg_out4_storage <= 4'd0;
        seg_out4_re <= 1'd0;
        seg_out5_storage <= 4'd0;
        seg_out5_re <= 1'd0;
        seg_out6_storage <= 4'd0;
        seg_out6_re <= 1'd0;
        seg_out7_storage <= 4'd0;
        seg_out7_re <= 1'd0;
        seg_counter <= 17'd0;
        seg_cs1 <= 8'd254;
        state_low_re <= 1'd0;
        state_high_re <= 1'd0;
        in_re <= 1'd0;
        button_mode_storage <= 1'd0;
        button_mode_re <= 1'd0;
        button_edge_storage <= 1'd0;
        button_edge_re <= 1'd0;
        button_in_pads_n_d <= 1'd0;
        button_pending <= 1'd0;
        button_trigger_d <= 1'd0;
        button_status_re <= 1'd0;
        button_pending_re <= 1'd0;
        button_pending_r <= 1'd0;
        button_enable_storage <= 1'd0;
        button_enable_re <= 1'd0;
        grant <= 2'd0;
        slave_sel_r <= 6'd0;
        count <= 20'd1000000;
        csr_bankarray_sel_r <= 1'd0;
        rs232phytx0_state <= 1'd0;
        rs232phyrx0_state <= 1'd0;
        uartbone_state <= 3'd0;
        cellularram_state <= 3'd0;
        rs232phytx1_state <= 1'd0;
        rs232phyrx1_state <= 1'd0;
        wishbone2csr_state <= 1'd0;
    end
    xilinxmultiregimpl0_regs0 <= serial_rx;
    xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
    xilinxmultiregimpl1_regs0 <= my_uart_pads_rx;
    xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
    xilinxmultiregimpl2_regs0 <= user_btn4;
    xilinxmultiregimpl2_regs1 <= xilinxmultiregimpl2_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Instance BUFG of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG(
	// Inputs.
	.I (crg_clkout0),

	// Outputs.
	.O (crg_clkout_buf0)
);

//------------------------------------------------------------------------------
// Instance BUFG_1 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_1(
	// Inputs.
	.I (crg_clkout1),

	// Outputs.
	.O (crg_clkout_buf1)
);

//------------------------------------------------------------------------------
// Instance BUFG_2 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_2(
	// Inputs.
	.I (crg_clkout2),

	// Outputs.
	.O (crg_clkout_buf2)
);

//------------------------------------------------------------------------------
// Instance BUFG_3 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_3(
	// Inputs.
	.I (crg_clkout3),

	// Outputs.
	.O (crg_clkout_buf3)
);

//------------------------------------------------------------------------------
// Instance BUFG_4 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_4(
	// Inputs.
	.I (crg_clkout4),

	// Outputs.
	.O (crg_clkout_buf4)
);

//------------------------------------------------------------------------------
// Instance BUFG_5 of BUFG Module.
//------------------------------------------------------------------------------
BUFG BUFG_5(
	// Inputs.
	.I (crg_clkout5),

	// Outputs.
	.O (crg_clkout_buf5)
);

//------------------------------------------------------------------------------
// Instance IDELAYCTRL of IDELAYCTRL Module.
//------------------------------------------------------------------------------
IDELAYCTRL IDELAYCTRL(
	// Inputs.
	.REFCLK (idelay_clk),
	.RST    (crg_ic_reset)
);

//------------------------------------------------------------------------------
// Memory rom: 6061-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:6060];
initial begin
	$readmemh("digilent_nexys4_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[basesoc_basesoc_adr];
end
assign basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("digilent_nexys4_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (basesoc_ram_we[0])
		sram[basesoc_ram_adr][7:0] <= basesoc_ram_dat_w[7:0];
	if (basesoc_ram_we[1])
		sram[basesoc_ram_adr][15:8] <= basesoc_ram_dat_w[15:8];
	if (basesoc_ram_we[2])
		sram[basesoc_ram_adr][23:16] <= basesoc_ram_dat_w[23:16];
	if (basesoc_ram_we[3])
		sram[basesoc_ram_adr][31:24] <= basesoc_ram_dat_w[31:24];
	sram_adr0 <= basesoc_ram_adr;
end
assign basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 40-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:39];
initial begin
	$readmemh("digilent_nexys4_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


assign cellularram_data = addCellularRAM_oe ? addCellularRAM_o : 16'bz;
assign addCellularRAM_i = cellularram_data;

//------------------------------------------------------------------------------
// Instance adder of adder Module.
//------------------------------------------------------------------------------
adder adder(
	// Inputs.
	.adr_i (addAdder_bus_adr),
	.clk_i (sys_clk),
	.cyc_i (addAdder_bus_cyc),
	.dat_i (addAdder_bus_dat_w),
	.rst_i (sys_rst),
	.sel_i (addAdder_bus_sel),
	.stb_i (addAdder_bus_stb),
	.we_i  (addAdder_bus_we),

	// Outputs.
	.ack_o (addAdder_bus_ack),
	.dat_o (addAdder_bus_dat_r),
	.err_o (addAdder_bus_err)
);

//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (my_uart_tx_fifo_wrport_we)
		storage[my_uart_tx_fifo_wrport_adr] <= my_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[my_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (my_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[my_uart_tx_fifo_rdport_adr];
end
assign my_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign my_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (my_uart_rx_fifo_wrport_we)
		storage_1[my_uart_rx_fifo_wrport_adr] <= my_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[my_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (my_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[my_uart_rx_fifo_rdport_adr];
end
assign my_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign my_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance FDCE of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE(
	// Inputs.
	.C   (crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (crg_reset),

	// Outputs.
	.Q   (reset0)
);

//------------------------------------------------------------------------------
// Instance FDCE_1 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_1(
	// Inputs.
	.C   (crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset0),

	// Outputs.
	.Q   (reset1)
);

//------------------------------------------------------------------------------
// Instance FDCE_2 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_2(
	// Inputs.
	.C   (crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset1),

	// Outputs.
	.Q   (reset2)
);

//------------------------------------------------------------------------------
// Instance FDCE_3 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_3(
	// Inputs.
	.C   (crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset2),

	// Outputs.
	.Q   (reset3)
);

//------------------------------------------------------------------------------
// Instance FDCE_4 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_4(
	// Inputs.
	.C   (crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset3),

	// Outputs.
	.Q   (reset4)
);

//------------------------------------------------------------------------------
// Instance FDCE_5 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_5(
	// Inputs.
	.C   (crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset4),

	// Outputs.
	.Q   (reset5)
);

//------------------------------------------------------------------------------
// Instance FDCE_6 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_6(
	// Inputs.
	.C   (crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset5),

	// Outputs.
	.Q   (reset6)
);

//------------------------------------------------------------------------------
// Instance FDCE_7 of FDCE Module.
//------------------------------------------------------------------------------
FDCE FDCE_7(
	// Inputs.
	.C   (crg_clkin),
	.CE  (1'd1),
	.CLR (1'd0),
	.D   (reset6),

	// Outputs.
	.Q   (reset7)
);

//------------------------------------------------------------------------------
// Instance MMCME2_ADV of MMCME2_ADV Module.
//------------------------------------------------------------------------------
MMCME2_ADV #(
	// Parameters.
	.BANDWIDTH        ("OPTIMIZED"),
	.CLKFBOUT_MULT_F  (4'd12),
	.CLKIN1_PERIOD    (10.0),
	.CLKOUT0_DIVIDE_F (5'd16),
	.CLKOUT0_PHASE    (1'd0),
	.CLKOUT1_DIVIDE   (4'd8),
	.CLKOUT1_PHASE    (1'd0),
	.CLKOUT2_DIVIDE   (4'd8),
	.CLKOUT2_PHASE    (7'd90),
	.CLKOUT3_DIVIDE   (3'd6),
	.CLKOUT3_PHASE    (1'd0),
	.CLKOUT4_DIVIDE   (5'd24),
	.CLKOUT4_PHASE    (1'd0),
	.CLKOUT5_DIVIDE   (5'd30),
	.CLKOUT5_PHASE    (1'd0),
	.DIVCLK_DIVIDE    (1'd1),
	.REF_JITTER1      (0.01)
) MMCME2_ADV (
	// Inputs.
	.CLKFBIN  (mmcm_fb),
	.CLKIN1   (crg_clkin),
	.PWRDWN   (crg_power_down),
	.RST      (reset7),

	// Outputs.
	.CLKFBOUT (mmcm_fb),
	.CLKOUT0  (crg_clkout0),
	.CLKOUT1  (crg_clkout1),
	.CLKOUT2  (crg_clkout2),
	.CLKOUT3  (crg_clkout3),
	.CLKOUT4  (crg_clkout4),
	.CLKOUT5  (crg_clkout5),
	.LOCKED   (crg_locked)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                           (sys_clk),
	.dBusWishbone_ACK              (basesoc_cpu_dbus_dbus_ack),
	.dBusWishbone_DAT_MISO         (basesoc_cpu_dbus_dbus_dat_r),
	.dBusWishbone_ERR              ((basesoc_cpu_dbus_dbus_err | basesoc_cpu_vexriscv_dbus_err)),
	.debugReset                    ((sys_rst | basesoc_cpu_reset)),
	.debug_bus_cmd_payload_address (basesoc_cpu_vexriscv_i_cmd_payload_address),
	.debug_bus_cmd_payload_data    (basesoc_cpu_vexriscv_i_cmd_payload_data),
	.debug_bus_cmd_payload_wr      (basesoc_cpu_vexriscv_i_cmd_payload_wr),
	.debug_bus_cmd_valid           (basesoc_cpu_vexriscv_i_cmd_valid),
	.externalInterruptArray        (basesoc_cpu_interrupt),
	.externalResetVector           (basesoc_vexriscv),
	.iBusWishbone_ACK              (basesoc_cpu_ibus_ibus_ack),
	.iBusWishbone_DAT_MISO         (basesoc_cpu_ibus_ibus_dat_r),
	.iBusWishbone_ERR              ((basesoc_cpu_ibus_ibus_err | basesoc_cpu_vexriscv_ibus_err)),
	.reset                         (((sys_rst | basesoc_cpu_reset) | basesoc_cpu_vexriscv_debug_reset)),
	.softwareInterrupt             (1'd0),
	.timerInterrupt                (1'd0),

	// Outputs.
	.dBusWishbone_ADR              (basesoc_cpu_dbus_dbus_adr),
	.dBusWishbone_BTE              (basesoc_cpu_dbus_dbus_bte),
	.dBusWishbone_CTI              (basesoc_cpu_dbus_dbus_cti),
	.dBusWishbone_CYC              (basesoc_cpu_dbus_dbus_cyc),
	.dBusWishbone_DAT_MOSI         (basesoc_cpu_dbus_dbus_dat_w),
	.dBusWishbone_SEL              (basesoc_cpu_dbus_dbus_sel),
	.dBusWishbone_STB              (basesoc_cpu_dbus_dbus_stb),
	.dBusWishbone_WE               (basesoc_cpu_dbus_dbus_we),
	.debug_bus_cmd_ready           (basesoc_cpu_vexriscv_o_cmd_ready),
	.debug_bus_rsp_data            (basesoc_cpu_vexriscv_o_rsp_data),
	.debug_resetOut                (basesoc_cpu_vexriscv_o_resetOut),
	.iBusWishbone_ADR              (basesoc_cpu_ibus_ibus_adr),
	.iBusWishbone_BTE              (basesoc_cpu_ibus_ibus_bte),
	.iBusWishbone_CTI              (basesoc_cpu_ibus_ibus_cti),
	.iBusWishbone_CYC              (basesoc_cpu_ibus_ibus_cyc),
	.iBusWishbone_DAT_MOSI         (basesoc_cpu_ibus_ibus_dat_w),
	.iBusWishbone_SEL              (basesoc_cpu_ibus_ibus_sel),
	.iBusWishbone_STB              (basesoc_cpu_ibus_ibus_stb),
	.iBusWishbone_WE               (basesoc_cpu_ibus_ibus_we)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE (
	// Inputs.
	.C   (sys_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (xilinxasyncresetsynchronizerimpl0),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl0_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_1 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_1 (
	// Inputs.
	.C   (sys_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl0_rst_meta),
	.PRE (xilinxasyncresetsynchronizerimpl0),

	// Outputs.
	.Q   (sys_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_2 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_2 (
	// Inputs.
	.C   (sys2x_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (xilinxasyncresetsynchronizerimpl1),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl1_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_3 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_3 (
	// Inputs.
	.C   (sys2x_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl1_rst_meta),
	.PRE (xilinxasyncresetsynchronizerimpl1),

	// Outputs.
	.Q   (sys2x_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_4 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_4 (
	// Inputs.
	.C   (sys2x_dqs_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (xilinxasyncresetsynchronizerimpl2),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl2_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_5 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_5 (
	// Inputs.
	.C   (sys2x_dqs_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl2_rst_meta),
	.PRE (xilinxasyncresetsynchronizerimpl2),

	// Outputs.
	.Q   (sys2x_dqs_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_6 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_6 (
	// Inputs.
	.C   (idelay_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (xilinxasyncresetsynchronizerimpl3),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl3_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_7 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_7 (
	// Inputs.
	.C   (idelay_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl3_rst_meta),
	.PRE (xilinxasyncresetsynchronizerimpl3),

	// Outputs.
	.Q   (idelay_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_8 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_8 (
	// Inputs.
	.C   (eth_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (xilinxasyncresetsynchronizerimpl4),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl4_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_9 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_9 (
	// Inputs.
	.C   (eth_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl4_rst_meta),
	.PRE (xilinxasyncresetsynchronizerimpl4),

	// Outputs.
	.Q   (eth_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_10 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_10 (
	// Inputs.
	.C   (vga_clk),
	.CE  (1'd1),
	.D   (1'd0),
	.PRE (xilinxasyncresetsynchronizerimpl5),

	// Outputs.
	.Q   (xilinxasyncresetsynchronizerimpl5_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
//------------------------------------------------------------------------------
// Instance FDPE_11 of FDPE Module.
//------------------------------------------------------------------------------
FDPE #(
	// Parameters.
	.INIT (1'd1)
) FDPE_11 (
	// Inputs.
	.C   (vga_clk),
	.CE  (1'd1),
	.D   (xilinxasyncresetsynchronizerimpl5_rst_meta),
	.PRE (xilinxasyncresetsynchronizerimpl5),

	// Outputs.
	.Q   (vga_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-03-12 14:21:26.
//------------------------------------------------------------------------------
